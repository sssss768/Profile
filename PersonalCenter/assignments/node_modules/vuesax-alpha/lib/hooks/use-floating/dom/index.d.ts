import type { FloatingElement, ReferenceElement } from './types';
export * from './platform';
export * from './utils';
export * from './middleware';
export * from './types';
export declare const computePosition: (reference: ReferenceElement, floating: FloatingElement, options?: Partial<{
    strategy?: import("../utils").Strategy | undefined;
    placement?: import("../utils").Placement | undefined;
    middleware?: (false | {
        name: string;
        options?: any;
        fn: (state: {
            x: number;
            y: number;
            strategy: import("../utils").Strategy;
            placement: import("../utils").Placement;
            initialPlacement: import("../utils").Placement;
            middlewareData: import("vuesax-alpha/es/hooks/use-floating/core").MiddlewareData;
            rects: import("../utils").ElementRects;
            platform: import("vuesax-alpha/es/hooks/use-floating/core").Platform;
            elements: import("./types").Elements;
        }) => import("vuesax-alpha/es/hooks/use-floating/core").MiddlewareReturn | Promise<import("vuesax-alpha/es/hooks/use-floating/core").MiddlewareReturn>;
    } | null | undefined)[] | undefined;
    platform?: import("./types").Platform | undefined;
}> | undefined) => Promise<import("vuesax-alpha/es/hooks/use-floating/core").ComputePositionReturn>;
