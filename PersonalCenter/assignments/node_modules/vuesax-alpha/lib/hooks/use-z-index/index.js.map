{"version":3,"file":"index.js","sources":["../../../../../packages/hooks/use-z-index/index.ts"],"sourcesContent":["import { computed, inject, ref, unref } from 'vue'\nimport { isNumber } from '@vuesax-alpha/utils'\nimport type { InjectionKey, Ref } from 'vue'\n\nconst zIndex = ref(0)\nexport const defaultInitialZIndex = 2000\n\nexport const zIndexContextKey: InjectionKey<Ref<number | undefined>> =\n  Symbol('zIndexContextKey')\n\nexport const useZIndex = (zIndexOverrides?: Ref<number>) => {\n  const zIndexInjection = zIndexOverrides || inject(zIndexContextKey, undefined)\n\n  const initialZIndex = computed(() => {\n    const zIndexFromInjection = unref(zIndexInjection)\n    return isNumber(zIndexFromInjection)\n      ? zIndexFromInjection\n      : defaultInitialZIndex\n  })\n\n  const currentZIndex = computed(() => initialZIndex.value + zIndex.value)\n\n  const nextZIndex = () => {\n    zIndex.value++\n    return currentZIndex.value\n  }\n\n  return {\n    initialZIndex,\n    currentZIndex,\n    nextZIndex,\n  }\n}\n\nexport type UseZIndexReturn = ReturnType<typeof useZIndex>\n"],"names":["ref","inject","computed","unref","isNumber"],"mappings":";;;;;;;;AAIA,MAAM,MAAA,GAASA,QAAI,CAAC,CAAA,CAAA;AACb,MAAM,oBAAuB,GAAA,IAAA;AAEvB,MAAA,gBAAA,GACX,OAAO,kBAAkB,EAAA;AAEd,MAAA,SAAA,GAAY,CAAC,eAAkC,KAAA;AAC1D,EAAA,MAAM,eAAkB,GAAA,eAAA,IAAmBC,UAAO,CAAA,gBAAA,EAAkB,KAAS,CAAA,CAAA,CAAA;AAE7E,EAAM,MAAA,aAAA,GAAgBC,aAAS,MAAM;AACnC,IAAM,MAAA,mBAAA,GAAsBC,UAAM,eAAe,CAAA,CAAA;AACjD,IAAO,OAAAC,cAAA,CAAS,mBAAmB,CAAA,GAC/B,mBACA,GAAA,oBAAA,CAAA;AAAA,GACL,CAAA,CAAA;AAED,EAAA,MAAM,gBAAgBF,YAAS,CAAA,MAAM,aAAc,CAAA,KAAA,GAAQ,OAAO,KAAK,CAAA,CAAA;AAEvE,EAAA,MAAM,aAAa,MAAM;AACvB,IAAO,MAAA,CAAA,KAAA,EAAA,CAAA;AACP,IAAA,OAAO,aAAc,CAAA,KAAA,CAAA;AAAA,GACvB,CAAA;AAEA,EAAO,OAAA;AAAA,IACL,aAAA;AAAA,IACA,aAAA;AAAA,IACA,UAAA;AAAA,GACF,CAAA;AACF;;;;;;"}