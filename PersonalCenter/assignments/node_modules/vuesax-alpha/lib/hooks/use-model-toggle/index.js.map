{"version":3,"file":"index.js","sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, onMounted, watch } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport {\n  buildProp,\n  definePropType,\n  isBoolean,\n  isClient,\n} from '@vuesax-alpha/utils'\nimport type { ExtractPropType } from '@vuesax-alpha/utils'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { ComponentPublicInstance, ExtractPropTypes, Ref } from 'vue'\n\nconst _prop = buildProp({\n  type: definePropType<boolean | null>(Boolean),\n  default: null,\n} as const)\nconst _event = buildProp({\n  type: definePropType<(val: boolean) => void>(Function),\n} as const)\n\nexport type UseModelTogglePropsRaw<T extends string> = {\n  [K in T]: typeof _prop\n} & {\n  [K in `onUpdate:${T}`]: typeof _event\n}\n\nexport type UseModelTogglePropsGeneric<T extends string> = {\n  [K in T]: ExtractPropType<typeof _prop>\n} & {\n  [K in `onUpdate:${T}`]: ExtractPropType<typeof _event>\n}\n\nexport const createModelToggleComposable = <T extends string>(name: T) => {\n  const updateEventKey = `update:${name}` as const\n  const updateEventKeyRaw = `onUpdate:${name}` as const\n  const useModelToggleEmits = [updateEventKey]\n\n  const useModelToggleProps = {\n    [name]: _prop,\n    [updateEventKeyRaw]: _event,\n  } as UseModelTogglePropsRaw<T>\n\n  const useModelToggle = ({\n    indicator,\n    toggleReason,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    processBeforeClosing,\n    onShow,\n    onHide,\n  }: ModelToggleParams) => {\n    const instance = getCurrentInstance()!\n    const { emit } = instance\n    const props = instance.props as UseModelTogglePropsGeneric<T> & {\n      disabled: boolean\n    }\n    const hasUpdateHandler = computed(() =>\n      isFunction(props[updateEventKeyRaw])\n    )\n    // when it matches the default value we say this is absent\n    // though this could be mistakenly passed from the user but we need to rule out that\n    // condition\n    const isModelBindingAbsent = computed(() => props[name] === null)\n\n    const doShow = (event?: Event) => {\n      if (indicator.value === true) {\n        return\n      }\n\n      indicator.value = true\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onShow)) {\n        onShow(event)\n      }\n    }\n\n    const doHide = (event?: Event) => {\n      if (indicator.value === false) {\n        return\n      }\n\n      indicator.value = false\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onHide)) {\n        onHide(event)\n      }\n    }\n\n    const show = (event?: Event) => {\n      if (\n        props.disabled === true ||\n        (isFunction(shouldProceed) && !shouldProceed())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, true)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event)\n      }\n    }\n\n    const hide = (event?: Event) => {\n      if (\n        props.disabled === true ||\n        !isClient ||\n        (isFunction(processBeforeClosing) && !processBeforeClosing())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, false)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event)\n      }\n    }\n\n    const onChange = (val: boolean) => {\n      if (!isBoolean(val)) return\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false)\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow()\n        } else {\n          doHide()\n        }\n      }\n    }\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide()\n      } else {\n        show()\n      }\n    }\n\n    watch(() => props[name], onChange)\n\n    if (\n      shouldHideWhenRouteChanges &&\n      instance.appContext.config.globalProperties.$route !== undefined\n    ) {\n      watch(\n        () => ({\n          ...(\n            instance.proxy as ComponentPublicInstance<{\n              $route: RouteLocationNormalizedLoaded\n            }>\n          ).$route,\n        }),\n        () => {\n          if (shouldHideWhenRouteChanges.value && indicator.value) {\n            hide()\n          }\n        }\n      )\n    }\n\n    onMounted(() => {\n      onChange(props[name])\n    })\n\n    return {\n      hide,\n      show,\n      toggle,\n      hasUpdateHandler,\n    }\n  }\n\n  return {\n    useModelToggle,\n    useModelToggleProps,\n    useModelToggleEmits,\n  }\n}\n\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } =\n  createModelToggleComposable('modelValue')\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps }\n\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  toggleReason?: Ref<Event | undefined>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  processBeforeClosing?: () => boolean\n  onShow?: (event?: Event) => void\n  onHide?: (event?: Event) => void\n}\n"],"names":["buildProp","definePropType","useModelToggleEmits","useModelToggleProps","useModelToggle","getCurrentInstance","computed","isFunction","isClient","isBoolean","watch","onMounted"],"mappings":"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"}