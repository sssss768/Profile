export declare const VsCheckbox: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType) | ((new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType))[], unknown, unknown, undefined, boolean>;
    readonly notValue: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType) | ((new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly value: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType) | ((new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly id: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly indeterminate: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly checked: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly checkedForce: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly loading: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly label: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly labelBefore: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly lineThrough: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly name: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
    readonly min: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly max: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly id: string;
        readonly modelValue?: import("./src/checkbox").CheckboxModelType | undefined;
        readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly min?: number | undefined;
        readonly max?: number | undefined;
        readonly color?: import("../..").Color | undefined;
        readonly label?: string | undefined;
        readonly name?: string | undefined;
        readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly value?: import("./src/checkbox").CheckboxModelType | undefined;
        readonly notValue?: import("./src/checkbox").CheckboxModelType | undefined;
        readonly indeterminate?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly checked?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly checkedForce?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly labelBefore?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly lineThrough?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly "onUpdate:modelValue"?: ((val: import("./src/checkbox").CheckboxModelType) => any) | undefined;
        readonly onChange?: ((val: import("./src/checkbox").CheckboxModelType) => any) | undefined;
    } & {}>;
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    emit: ((event: "update:modelValue", val: import("./src/checkbox").CheckboxModelType) => void) & ((event: "change", val: import("./src/checkbox").CheckboxModelType) => void);
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    checkboxId: string;
    isChecked: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<boolean>;
    model: import("vue").WritableComputedRef<import("./src/checkbox").CheckboxValueType>;
    hasOwnLabel: import("vue").ComputedRef<boolean>;
    handleChange: (e: Event) => void;
    vsBaseClasses: string[];
    checkboxKls: import("vue").ComputedRef<(string | string[])[]>;
    checkboxStyles: import("vue").ComputedRef<Record<string, string>[]>;
    readonly IconCheck: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly indeterminate: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly active: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly indeterminate: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly active: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>>, {}, {}>> & Record<string, any>;
    readonly IconLoading: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (val: import("./src/checkbox").CheckboxModelType) => boolean;
    change: (val: import("./src/checkbox").CheckboxModelType) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType) | ((new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType))[], unknown, unknown, undefined, boolean>;
    readonly notValue: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType) | ((new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly value: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType) | ((new (...args: any[]) => import("./src/checkbox").CheckboxModelType & {}) | (() => import("./src/checkbox").CheckboxModelType))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly id: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly indeterminate: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly checked: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly checkedForce: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly loading: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly label: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly labelBefore: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly lineThrough: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly name: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
    readonly min: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly max: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    "onUpdate:modelValue"?: ((val: import("./src/checkbox").CheckboxModelType) => any) | undefined;
    onChange?: ((val: import("./src/checkbox").CheckboxModelType) => any) | undefined;
}, {
    readonly modelValue: import("./src/checkbox").CheckboxModelType;
    readonly name: string;
    readonly id: string;
}, {}>> & {
    CheckboxGroup: import("vue").DefineComponent<{
        readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType) | ((new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType))[], unknown, unknown, () => never[], boolean>;
        readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
        readonly min: {
            readonly type: import("vue").PropType<number>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly max: {
            readonly type: import("vue").PropType<number>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly modelValue: import("./src/checkbox-group").CheckboxGroupValueType;
            readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly min?: number | undefined;
            readonly max?: number | undefined;
            readonly "onUpdate:modelValue"?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
            readonly onChange?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
        } & {}>;
        emit: ((event: "update:modelValue", val: import("./src/checkbox-group").CheckboxGroupValueType) => void) & ((event: "change", val: import("./src/checkbox-group").CheckboxGroupValueType) => void);
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        changeEvent: (value: import("./src/checkbox-group").CheckboxGroupValueType) => Promise<void>;
        modelValue: import("vue").WritableComputedRef<import("./src/checkbox-group").CheckboxGroupValueType>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (val: import("./src/checkbox-group").CheckboxGroupValueType) => boolean;
        change: (val: import("./src/checkbox-group").CheckboxGroupValueType) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType) | ((new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType))[], unknown, unknown, () => never[], boolean>;
        readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
        readonly min: {
            readonly type: import("vue").PropType<number>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly max: {
            readonly type: import("vue").PropType<number>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>> & {
        "onUpdate:modelValue"?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
        onChange?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
    }, {
        readonly modelValue: import("./src/checkbox-group").CheckboxGroupValueType;
        readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    }, {}>;
};
export default VsCheckbox;
export declare const VsCheckboxGroup: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType) | ((new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType))[], unknown, unknown, () => never[], boolean>;
    readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly min: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly max: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly modelValue: import("./src/checkbox-group").CheckboxGroupValueType;
        readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly min?: number | undefined;
        readonly max?: number | undefined;
        readonly "onUpdate:modelValue"?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
        readonly onChange?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
    } & {}>;
    emit: ((event: "update:modelValue", val: import("./src/checkbox-group").CheckboxGroupValueType) => void) & ((event: "change", val: import("./src/checkbox-group").CheckboxGroupValueType) => void);
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    changeEvent: (value: import("./src/checkbox-group").CheckboxGroupValueType) => Promise<void>;
    modelValue: import("vue").WritableComputedRef<import("./src/checkbox-group").CheckboxGroupValueType>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (val: import("./src/checkbox-group").CheckboxGroupValueType) => boolean;
    change: (val: import("./src/checkbox-group").CheckboxGroupValueType) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType) | ((new (...args: any[]) => import("./src/checkbox-group").CheckboxGroupValueType) | (() => import("./src/checkbox-group").CheckboxGroupValueType))[], unknown, unknown, () => never[], boolean>;
    readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly min: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly max: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    "onUpdate:modelValue"?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
    onChange?: ((val: import("./src/checkbox-group").CheckboxGroupValueType) => any) | undefined;
}, {
    readonly modelValue: import("./src/checkbox-group").CheckboxGroupValueType;
    readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>>;
export * from './src/checkbox-group';
export * from './src/checkbox';
