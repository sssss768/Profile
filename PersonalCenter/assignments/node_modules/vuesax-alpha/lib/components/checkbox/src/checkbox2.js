'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
require('../../../hooks/index.js');
require('../../../utils/index.js');
var index$4 = require('../../icon/index.js');
var checkbox = require('./checkbox.js');
require('./composables/index.js');
var pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');
var index = require('../../../hooks/use-namespace/index.js');
var index$1 = require('../../../hooks/use-id/index.js');
var useCheckbox = require('./composables/use-checkbox.js');
var index$2 = require('../../../hooks/use-base-component/index.js');
var index$3 = require('../../../hooks/use-common-props/index.js');
var color = require('../../../utils/color.js');

const _hoisted_1 = ["id", "value", "name", "disabled"];
const _hoisted_2 = ["for"];
const __default__ = vue.defineComponent({
  inheritAttrs: false,
  name: "VsCheckbox"
});
const _sfc_main = vue.defineComponent({
  ...__default__,
  props: checkbox.checkboxProps,
  emits: checkbox.checkboxEmits,
  setup(__props, { emit }) {
    var _a;
    const props = __props;
    const slots = vue.useSlots();
    const ns = index.useNamespace("checkbox");
    const checkboxId = (_a = props.id) != null ? _a : index$1.useId();
    const { isChecked, isDisabled, model, hasOwnLabel, handleChange } = useCheckbox.useCheckbox(
      props,
      emit,
      slots
    );
    const vsBaseClasses = index$2.useVuesaxBaseComponent(index$3.useColor());
    const checkboxKls = vue.computed(() => [
      ns.b(),
      vsBaseClasses,
      ns.is("disabled", isDisabled.value),
      ns.is("checked", isChecked.value),
      ns.is("label-before", props.labelBefore),
      ns.is("loading", props.loading)
    ]);
    const checkboxStyles = vue.computed(() => [
      ns.cssVar({
        color: color.getVsColor(props.color)
      })
    ]);
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock(
        "div",
        {
          class: vue.normalizeClass(checkboxKls.value),
          style: vue.normalizeStyle(checkboxStyles.value)
        },
        [
          vue.createElementVNode(
            "div",
            {
              class: vue.normalizeClass(vue.unref(ns).e("input"))
            },
            [
              vue.withDirectives(vue.createElementVNode("input", vue.mergeProps(_ctx.$attrs, {
                id: vue.unref(checkboxId),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.isRef(model) ? model.value = $event : null),
                value: _ctx.value,
                name: _ctx.name,
                disabled: vue.unref(isDisabled),
                class: vue.unref(ns).e("original"),
                type: "checkbox",
                onChange: _cache[1] || (_cache[1] = (...args) => vue.unref(handleChange) && vue.unref(handleChange)(...args))
              }), null, 16, _hoisted_1), [
                [vue.vModelCheckbox, vue.unref(model)]
              ]),
              vue.createElementVNode(
                "div",
                {
                  class: vue.normalizeClass(vue.unref(ns).em("input", "mask"))
                },
                [
                  !_ctx.$slots.icon ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.IconCheck), {
                    key: 0,
                    active: vue.unref(isChecked),
                    indeterminate: _ctx.indeterminate
                  }, null, 8, ["active", "indeterminate"])) : vue.renderSlot(_ctx.$slots, "icon", { key: 1 })
                ],
                2
              ),
              _ctx.loading ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.IconLoading), { key: 0 })) : vue.createCommentVNode("v-if", true)
            ],
            2
          ),
          vue.unref(hasOwnLabel) ? (vue.openBlock(), vue.createElementBlock("label", {
            key: 0,
            for: vue.unref(checkboxId),
            class: vue.normalizeClass([vue.unref(ns).e("label"), vue.unref(ns).is("line-through", _ctx.lineThrough)])
          }, [
            vue.renderSlot(_ctx.$slots, "default"),
            !_ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 0 },
              [
                vue.createTextVNode(
                  vue.toDisplayString(_ctx.label),
                  1
                )
              ],
              64
            )) : vue.createCommentVNode("v-if", true)
          ], 10, _hoisted_2)) : vue.createCommentVNode("v-if", true)
        ],
        6
      );
    };
  }
});
var Checkbox = /* @__PURE__ */ pluginVue_exportHelper["default"](_sfc_main, [["__file", "/home/runner/work/vuesax-alpha/vuesax-alpha/packages/components/checkbox/src/checkbox.vue"]]);

exports["default"] = Checkbox;
//# sourceMappingURL=checkbox2.js.map
