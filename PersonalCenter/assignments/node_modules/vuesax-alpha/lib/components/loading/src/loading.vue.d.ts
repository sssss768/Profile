import { unref } from 'vue';
import type { Color } from 'vuesax-alpha/es/constants';
declare const _default: import("vue").DefineComponent<{
    type: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") | ((new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate"))[], "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate", unknown, string, boolean>;
    text: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, number, boolean>;
    color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    target: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    opacity: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, number, boolean>;
    percent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    progress: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    background: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly type: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") | ((new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate"))[], "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate", unknown>;
        readonly scale: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
        readonly opacity: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
        readonly text?: string | undefined;
        readonly color?: Color | undefined;
        readonly target?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
        readonly progress?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown> | undefined;
        readonly background?: Color | undefined;
        readonly percent?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown> | undefined;
    } & {}>;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    zIndex: {
        initialZIndex: import("vue").ComputedRef<number>;
        currentZIndex: import("vue").ComputedRef<number>;
        nextZIndex: () => number;
    };
    currentZIndex: import("vue").ComputedRef<number>;
    loadingRef: import("vue").Ref<HTMLElement | undefined>;
    color: import("vue").ComputedRef<Color | undefined>;
    background: import("vue").ComputedRef<Color | undefined>;
    type: import("vue").ComputedRef<string | undefined>;
    loadingKls: import("vue").ComputedRef<(string | undefined)[]>;
    loadingStyles: import("vue").ComputedRef<(Record<string, string> | {
        zIndex: number;
    })[]>;
    close: () => void;
    unref: typeof unref;
    readonly IconLoading: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") | ((new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate"))[], "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate", unknown, string, boolean>;
    text: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, number, boolean>;
    color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    target: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    opacity: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, number, boolean>;
    percent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    progress: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    background: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>>, {
    type: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") | ((new (...args: any[]) => ("default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate") & {}) | (() => "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate"))[], "default" | "border" | "gradient" | "scale" | "square" | "atom" | "ball" | "waves" | "points" | "circles" | "corners" | "rectangle" | "square-rotate", unknown>;
    scale: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    opacity: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
}, {}>;
export default _default;
