import type { OffsetOptions, Placement, Strategy } from 'vuesax-alpha/es/hooks/use-floating/vue';
import type { EmitFn } from 'vuesax-alpha/es/utils';
import type Content from './content.vue';
import type { ExtractPropTypes, StyleValue } from 'vue';
declare type ClassObjectType = Record<string, boolean>;
declare type ClassType = string | ClassObjectType | ClassType[];
export declare const popperContentProps: {
    animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
    appendTo: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
    teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => Strategy & {}) | (() => Strategy) | ((new (...args: any[]) => Strategy & {}) | (() => Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
    fit: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => Placement & {}) | (() => Placement) | ((new (...args: any[]) => Placement & {}) | (() => Placement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
    zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
    interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }))[], unknown, unknown, () => {}, boolean>;
    shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks/use-floating/vue").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks/use-floating/vue").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks/use-floating/vue").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks/use-floating/vue").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks/use-floating/vue").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks/use-floating/vue").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks/use-floating/vue").Boundary | undefined;
    }))[], unknown, unknown, () => {}, boolean>;
    windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => OffsetOptions & {}) | (() => OffsetOptions) | ((new (...args: any[]) => OffsetOptions & {}) | (() => OffsetOptions))[], unknown, unknown, number, boolean>;
    content: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    rawContent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => ClassType & {}) | (() => ClassType) | ((new (...args: any[]) => ClassType & {}) | (() => ClassType))[], unknown, unknown, string, boolean>;
    popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => StyleValue & {}) | (() => StyleValue) | ((new (...args: any[]) => StyleValue & {}) | (() => StyleValue))[], unknown, unknown, string, boolean>;
    persistent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
};
export declare type PopperContentProps = ExtractPropTypes<typeof popperContentProps>;
export declare const popperContentEmits: {
    mouseenter: (evt: MouseEvent) => boolean;
    mouseleave: (evt: MouseEvent) => boolean;
    focus: () => boolean;
    blur: () => boolean;
    close: () => boolean;
};
export declare type PopperContentEmits = typeof popperContentEmits;
export declare type PopperContentEmitFn = EmitFn<PopperContentEmits>;
export declare type PopperContentInstance = InstanceType<typeof Content>;
export {};
