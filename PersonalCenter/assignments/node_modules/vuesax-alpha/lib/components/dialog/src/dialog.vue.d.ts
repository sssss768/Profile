declare const _default: import("vue").DefineComponent<{
    readonly modelValue: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly color: {
        readonly default: "primary";
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly overlayBlur: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly beforeClose: {
        readonly type: import("vue").PropType<import("./dialog").DialogBeforeCloseFn>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly loading: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly fullScreen: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly notClose: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly preventClose: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly notPadding: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly lockScroll: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly shape: import("../../../utils").VsPropFinalized<StringConstructor, "square" | "rounded", unknown, "rounded", boolean>;
    readonly autoWidth: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly scroll: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly notCenter: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly width: import("../../../utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly overflowHidden: BooleanConstructor;
    readonly blur: BooleanConstructor;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly modelValue: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly color: import("../../..").Color;
        readonly loading: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly shape: import("../../../utils").VsPropMergeType<StringConstructor, "square" | "rounded", unknown>;
        readonly scroll: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly width: string;
        readonly overlayBlur: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly fullScreen: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly notClose: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly preventClose: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly notPadding: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly lockScroll: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly autoWidth: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly notCenter: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly overflowHidden: boolean;
        readonly blur: boolean;
        readonly beforeClose?: import("./dialog").DialogBeforeCloseFn | undefined;
        readonly "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        readonly onOpen?: (() => any) | undefined;
        readonly onOpened?: (() => any) | undefined;
        readonly onClose?: (() => any) | undefined;
        readonly onClosed?: (() => any) | undefined;
    } & {}>;
    emit: ((event: "update:modelValue", value: boolean) => void) & ((event: "open") => void) & ((event: "opened") => void) & ((event: "close") => void) & ((event: "closed") => void);
    selector: import("vue").ComputedRef<string>;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    visible: import("vue").Ref<boolean>;
    zIndex: import("vue").Ref<number>;
    dialogKls: import("vue").ComputedRef<(string | string[] | {
        [x: string]: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    })[]>;
    dialogStyles: import("vue").ComputedRef<{
        width: string;
    }>;
    close: () => void;
    afterEnter: () => void;
    afterLeave: () => void;
    beforeLeave: () => void;
    handleClose: () => void;
    clickDialog: {
        onClick: (e: MouseEvent) => void;
        onMousedown: (e: MouseEvent) => void;
        onMouseup: (e: MouseEvent) => void;
    };
    rootKls: import("vue").ComputedRef<string[]>;
    readonly IconClose: import("../../../utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("../../../utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("../../../utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }>>, {
        readonly scale: import("../../../utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    }, {}>> & Record<string, any>;
    readonly IconLoading: import("../../../utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    open: () => boolean;
    opened: () => boolean;
    close: () => boolean;
    closed: () => boolean;
    "update:modelValue": (value: boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly modelValue: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly color: {
        readonly default: "primary";
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly overlayBlur: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly beforeClose: {
        readonly type: import("vue").PropType<import("./dialog").DialogBeforeCloseFn>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly loading: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly fullScreen: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly notClose: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly preventClose: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly notPadding: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly lockScroll: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly shape: import("../../../utils").VsPropFinalized<StringConstructor, "square" | "rounded", unknown, "rounded", boolean>;
    readonly autoWidth: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly scroll: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly notCenter: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly width: import("../../../utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly overflowHidden: BooleanConstructor;
    readonly blur: BooleanConstructor;
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onOpen?: (() => any) | undefined;
    onOpened?: (() => any) | undefined;
    onClose?: (() => any) | undefined;
    onClosed?: (() => any) | undefined;
}, {
    readonly modelValue: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly color: import("../../..").Color;
    readonly loading: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly shape: import("../../../utils").VsPropMergeType<StringConstructor, "square" | "rounded", unknown>;
    readonly scroll: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly width: string;
    readonly overlayBlur: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly fullScreen: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly notClose: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly preventClose: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly notPadding: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly lockScroll: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly autoWidth: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly notCenter: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly overflowHidden: boolean;
    readonly blur: boolean;
}, {}>;
export default _default;
