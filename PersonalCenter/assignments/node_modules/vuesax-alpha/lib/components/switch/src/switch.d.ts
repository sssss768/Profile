import type { EmitFn } from 'vuesax-alpha/es/utils';
import type { ExtractPropTypes } from 'vue';
import type Switch from './switch.vue';
export declare const switchProps: {
    color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("vuesax-alpha/es/constants").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    activeValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    inactiveValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    loading: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "square", unknown, null, boolean>;
    indeterminate: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    icon: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
};
export declare type SwitchProps = ExtractPropTypes<typeof switchProps>;
export declare const switchEmits: {
    "update:modelValue": (val: boolean | string | number) => boolean;
    change: (val: boolean | string | number) => boolean;
    input: (val: boolean | string | number) => boolean;
};
export declare type SwitchEmits = typeof switchEmits;
export declare type SwitchEmitFn = EmitFn<SwitchEmits>;
export declare type SwitchInstance = InstanceType<typeof Switch>;
