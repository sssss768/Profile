import type { CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    readonly color: {
        readonly default: "primary";
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("vuesax-alpha/es/constants").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly closable: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly hiddenContent: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
    readonly page: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    readonly progress: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [NumberConstructor, StringConstructor], unknown, unknown, 0, boolean>;
    readonly time: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [NumberConstructor, StringConstructor], unknown, unknown, 0, boolean>;
    readonly type: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "" | "border" | "flat" | "gradient" | "relief" | "shadow" | "solid", unknown, "", boolean>;
    readonly border: BooleanConstructor;
    readonly flat: BooleanConstructor;
    readonly gradient: BooleanConstructor;
    readonly relief: BooleanConstructor;
    readonly shadow: BooleanConstructor;
    readonly solid: BooleanConstructor;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly type: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "" | "border" | "flat" | "gradient" | "relief" | "shadow" | "solid", unknown>;
        readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly color: import("vuesax-alpha/es/constants").Color;
        readonly progress: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
        readonly time: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
        readonly hiddenContent: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly page: number;
        readonly border: boolean;
        readonly flat: boolean;
        readonly gradient: boolean;
        readonly relief: boolean;
        readonly shadow: boolean;
        readonly solid: boolean;
        readonly closable?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        readonly "onUpdate:page"?: ((value: number) => any) | undefined;
        readonly "onUpdate:hiddenContent"?: ((value: boolean) => any) | undefined;
    } & {}>;
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    emit: ((event: "update:modelValue", value: boolean) => void) & ((event: "update:page", value: number) => void) & ((event: "update:hiddenContent", value: boolean) => void);
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    vsBaseClasses: string[];
    alertClasses: import("vue").ComputedRef<(string | false | string[])[]>;
    alertStyles: import("vue").ComputedRef<CSSProperties>;
    getTotalPages: import("vue").ComputedRef<number>;
    getPages: import("vue").ComputedRef<any>;
    handleClickClose: () => void;
    handleClickHidden: () => void;
    handleClickPrevPage: () => void;
    handleClickNextPage: () => void;
    readonly isBoolean: (val: any) => val is boolean;
    readonly IconClose: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }>>, {
        readonly scale: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    }, {}>> & Record<string, any>;
    readonly IconPlus: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly less: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly less: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>>, {}, {}>> & Record<string, any>;
    readonly VsCollapseTransition: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        on: {
            beforeEnter(el: import("vue").RendererElement): void;
            enter(el: import("vue").RendererElement): void;
            afterEnter(el: import("vue").RendererElement): void;
            beforeLeave(el: import("vue").RendererElement): void;
            leave(el: import("vue").RendererElement): void;
            afterLeave(el: import("vue").RendererElement): void;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => boolean;
    'update:page': (value: number) => boolean;
    'update:hiddenContent': (value: boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly color: {
        readonly default: "primary";
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("vuesax-alpha/es/constants").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly closable: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly hiddenContent: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
    readonly page: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    readonly progress: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [NumberConstructor, StringConstructor], unknown, unknown, 0, boolean>;
    readonly time: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [NumberConstructor, StringConstructor], unknown, unknown, 0, boolean>;
    readonly type: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "" | "border" | "flat" | "gradient" | "relief" | "shadow" | "solid", unknown, "", boolean>;
    readonly border: BooleanConstructor;
    readonly flat: BooleanConstructor;
    readonly gradient: BooleanConstructor;
    readonly relief: BooleanConstructor;
    readonly shadow: BooleanConstructor;
    readonly solid: BooleanConstructor;
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    "onUpdate:page"?: ((value: number) => any) | undefined;
    "onUpdate:hiddenContent"?: ((value: boolean) => any) | undefined;
}, {
    readonly type: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "" | "border" | "flat" | "gradient" | "relief" | "shadow" | "solid", unknown>;
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly color: import("vuesax-alpha/es/constants").Color;
    readonly progress: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
    readonly time: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
    readonly hiddenContent: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly page: number;
    readonly border: boolean;
    readonly flat: boolean;
    readonly gradient: boolean;
    readonly relief: boolean;
    readonly shadow: boolean;
    readonly solid: boolean;
}, {}>;
export default _default;
