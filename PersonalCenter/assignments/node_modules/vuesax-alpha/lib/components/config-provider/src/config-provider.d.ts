import type { ExtractPropTypes } from 'vue';
import type { Language } from 'vuesax-alpha/es/locale';
import type { ColorProviderContext } from 'vuesax-alpha/es/constants';
export declare const configProviderProps: {
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly namespace: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "vs", boolean>;
    readonly color: {
        readonly type: import("vue").PropType<ColorProviderContext>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly locale: {
        readonly type: import("vue").PropType<Language>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
};
export declare type ConfigProviderProps = ExtractPropTypes<typeof configProviderProps>;
declare const ConfigProvider: import("vue").DefineComponent<{
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly namespace: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "vs", boolean>;
    readonly color: {
        readonly type: import("vue").PropType<ColorProviderContext>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly locale: {
        readonly type: import("vue").PropType<Language>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly namespace: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "vs", boolean>;
    readonly color: {
        readonly type: import("vue").PropType<ColorProviderContext>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly locale: {
        readonly type: import("vue").PropType<Language>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>>, {
    readonly namespace: string;
}, {}>;
export declare type ConfigProviderInstance = InstanceType<typeof ConfigProvider>;
export default ConfigProvider;
