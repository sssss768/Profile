'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var lodashUnified = require('lodash-unified');
var index$1 = require('../../../select/index.js');
require('../../../../hooks/index.js');
var usePagination = require('../usePagination.js');
var sizes = require('./sizes.js');
var pluginVue_exportHelper = require('../../../../_virtual/plugin-vue_export-helper.js');
var index = require('../../../../hooks/use-namespace/index.js');

const __default__ = vue.defineComponent({
  name: "VsPaginationSizes"
});
const _sfc_main = vue.defineComponent({
  ...__default__,
  props: sizes.paginationSizesProps,
  emits: sizes.paginationSizesEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = index.useNamespace("pagination");
    const { disabled, handleSizeChange } = usePagination.usePagination();
    const innerPageSize = vue.ref(props.pageSize);
    vue.watch(
      () => props.pageSizes,
      (newVal, oldVal) => {
        if (lodashUnified.isEqual(newVal, oldVal))
          return;
        if (Array.isArray(newVal)) {
          const pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];
          emit("page-size-change", pageSize);
        }
      }
    );
    vue.watch(
      () => props.pageSize,
      (newVal) => {
        innerPageSize.value = newVal;
      }
    );
    const innerPageSizes = vue.computed(() => props.pageSizes);
    function handleChange(val) {
      if (val !== innerPageSize.value && typeof val === "number") {
        innerPageSize.value = val;
        handleSizeChange(Number(val));
      }
    }
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock(
        "span",
        {
          class: vue.normalizeClass(vue.unref(ns).e("sizes"))
        },
        [
          vue.createVNode(vue.unref(index$1.VsSelect), {
            "model-value": innerPageSize.value,
            disabled: vue.unref(disabled),
            onChange: handleChange
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(innerPageSizes.value, (item) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(index$1.VsOption), {
                    key: item,
                    value: item,
                    label: `${item} / page`
                  }, null, 8, ["value", "label"]);
                }),
                128
              ))
            ]),
            _: 1
          }, 8, ["model-value", "disabled"])
        ],
        2
      );
    };
  }
});
var Sizes = /* @__PURE__ */ pluginVue_exportHelper["default"](_sfc_main, [["__file", "/home/runner/work/vuesax-alpha/vuesax-alpha/packages/components/pagination/src/components/sizes.vue"]]);

exports["default"] = Sizes;
//# sourceMappingURL=sizes2.js.map
