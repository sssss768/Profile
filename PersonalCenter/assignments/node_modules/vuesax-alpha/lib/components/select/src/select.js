'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lodashUnified = require('lodash-unified');
require('../../../hooks/index.js');
require('../../../utils/index.js');
require('../../popper/index.js');
var runtime = require('../../../utils/vue/props/runtime.js');
var types = require('../../../utils/types.js');
var popper = require('../../popper/src/popper.js');
var index = require('../../../hooks/use-common-props/index.js');
var shared = require('@vue/shared');

const selectProps = runtime.buildProps({
  showAfter: {
    type: Number,
    default: 0,
    validator: (val) => types.isNumber(val) && val >= 0
  },
  hideAfter: {
    type: Number,
    default: 0,
    validator: (val) => types.isNumber(val) && val >= 0
  },
  flip: {
    ...popper.popperProps.flip,
    default: true
  },
  fit: {
    ...popper.popperProps.fit,
    default: true
  },
  disabled: popper.popperProps.disabled,
  onClick: popper.popperProps.onClick,
  onBlur: popper.popperProps.onBlur,
  onFocus: popper.popperProps.onFocus,
  onMouseenter: popper.popperProps.onMouseenter,
  onMouseleave: popper.popperProps.onMouseleave,
  onContextmenu: popper.popperProps.onContextmenu,
  onKeydown: popper.popperProps.onKeydown,
  strategy: { ...popper.popperProps.strategy, default: "absolute" },
  teleported: popper.popperProps.teleported,
  modelValue: {
    type: runtime.definePropType([Array, String, Number, Object]),
    default: ""
  },
  notValue: {
    type: runtime.definePropType([String, Number, Object]),
    default: ""
  },
  loadingText: { type: String },
  noMatchText: { type: String },
  noDataText: { type: String },
  allowCreate: { type: Boolean, default: false },
  multiple: { type: Boolean, default: false },
  multipleLimit: {
    type: Number,
    default: 0
  },
  filter: { type: Boolean },
  filterMethod: {
    type: runtime.definePropType(Function)
  },
  collapseChips: { type: Boolean },
  maxCollapseChips: {
    type: Number,
    default: 1,
    validator: (value) => types.isNumber(value) && value >= 0
  },
  defaultFirstOption: { type: Boolean },
  loading: { type: Boolean },
  color: { ...index.useColorProp, default: "primary" },
  state: index.useColorProp,
  block: { type: Boolean },
  hideScrollbar: { type: Boolean },
  labelFloat: { type: Boolean },
  label: {
    type: String,
    default: null
  },
  placeholder: {
    type: String,
    default: null
  },
  shape: {
    type: String,
    values: ["square"],
    default: ""
  },
  id: {
    type: String
  },
  nativeScrollbar: { type: Boolean },
  clearable: { type: Boolean }
});
const selectEmits = {
  "update:modelValue": (val) => shared.isArray(val) || shared.isString(val) || types.isNumber(val) || types.isBoolean(val) || shared.isObject(val) || lodashUnified.isNil(val),
  "visible-change": (val) => types.isBoolean(val),
  "remove-tag": (val) => val,
  focus: (event) => event instanceof Event,
  blur: (event) => event instanceof Event,
  change: (val) => shared.isArray(val) || shared.isString(val) || types.isNumber(val) || types.isBoolean(val) || shared.isObject(val) || lodashUnified.isNil(val),
  clear: () => true
};

exports.selectEmits = selectEmits;
exports.selectProps = selectProps;
//# sourceMappingURL=select.js.map
