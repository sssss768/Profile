import type { SelectOptionValue } from './tokens';
import type { ExtractPropTypes } from 'vue';
import type Option from './option.vue';
export declare const optionProps: {
    readonly value: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => SelectOptionValue & {}) | (() => SelectOptionValue) | ((new (...args: any[]) => SelectOptionValue & {}) | (() => SelectOptionValue))[], unknown, unknown, null, boolean>;
    readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly label: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly created: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
};
export declare type OptionProps = ExtractPropTypes<typeof optionProps>;
export declare type OptionInstance = InstanceType<typeof Option>;
