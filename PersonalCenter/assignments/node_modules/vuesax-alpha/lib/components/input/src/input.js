'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lodashUnified = require('lodash-unified');
require('../../../constants/index.js');
require('../../../hooks/index.js');
require('../../../utils/index.js');
var runtime = require('../../../utils/vue/props/runtime.js');
var index = require('../../../hooks/use-common-props/index.js');
var event = require('../../../constants/event.js');
var shared = require('@vue/shared');
var types = require('../../../utils/types.js');

const inputProps = runtime.buildProps({
  clearable: {
    type: Boolean,
    default: false
  },
  color: index.useColorProp,
  disabled: { type: Boolean },
  iconAfter: { type: Boolean },
  id: {
    type: String,
    default: null
  },
  inputStyle: {
    type: String,
    values: ["border", "shadow", "transparent"],
    default: null
  },
  labelFloat: {
    type: Boolean,
    default: false
  },
  label: {
    type: String,
    default: null
  },
  loading: { type: Boolean },
  modelValue: {
    type: runtime.definePropType([String, Number]),
    default: ""
  },
  placeholder: {
    type: String,
    default: null
  },
  progress: { type: Number },
  shape: {
    type: String,
    values: ["rounded", "square"],
    default: "rounded"
  },
  showPassword: {
    type: Boolean,
    default: false
  },
  state: index.useColorProp,
  textWhite: { type: Boolean },
  type: {
    type: String,
    default: "text"
  },
  wrapClasses: {
    type: String
  },
  wrapStyles: {
    type: runtime.definePropType([String, Object, Array])
  },
  block: { type: Boolean },
  border: Boolean,
  labelPlaceholder: String,
  shadow: Boolean,
  square: Boolean,
  transparent: Boolean
});
const inputEmits = {
  [event.UPDATE_MODEL_EVENT]: (text) => shared.isString(text) || types.isNumber(text) || lodashUnified.isNil(text),
  clickIcon: (evt) => evt instanceof Event,
  mouseleave: (evt) => evt instanceof MouseEvent,
  mouseenter: (evt) => evt instanceof MouseEvent,
  clear: () => true,
  input: (value) => !lodashUnified.isNil(value),
  change: (value) => shared.isString(value),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent,
  keydown: (evt) => evt instanceof Event
};

exports.inputEmits = inputEmits;
exports.inputProps = inputProps;
//# sourceMappingURL=input.js.map
