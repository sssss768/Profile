declare const _default: import("vue").DefineComponent<{
    readonly modelValue: import("../../../utils").VsPropFinalized<(new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]) | ((new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]))[], unknown, unknown, null, boolean>;
    readonly striped: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly loading: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly multiple: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    t: import("vuesax-alpha/es/hooks").Translator;
    props: import("@vue/shared").LooseRequired<{
        readonly modelValue: import("../../../utils").VsPropMergeType<(new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]) | ((new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]))[], unknown, unknown>;
        readonly loading: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly multiple: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly striped: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly "onUpdate:modelValue"?: ((value: import("./table").TableModelValueType) => any) | undefined;
    } & {}>;
    emit: (event: "update:modelValue", value: import("./table").TableModelValueType) => void;
    tableKls: import("vue").ComputedRef<string[]>;
    colspan: import("vue").Ref<number>;
    selected: (val: any) => void;
    theadRef: import("vue").Ref<HTMLElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: import("./table").TableModelValueType) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly modelValue: import("../../../utils").VsPropFinalized<(new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]) | ((new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]))[], unknown, unknown, null, boolean>;
    readonly striped: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly loading: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly multiple: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
}>> & {
    "onUpdate:modelValue"?: ((value: import("./table").TableModelValueType) => any) | undefined;
}, {
    readonly modelValue: import("../../../utils").VsPropMergeType<(new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]) | ((new (...args: any[]) => (import("./table").TableModelValueType | import("./table").TableModelValueType[]) & {}) | (() => import("./table").TableModelValueType | import("./table").TableModelValueType[]))[], unknown, unknown>;
    readonly loading: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly multiple: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly striped: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>;
export default _default;
