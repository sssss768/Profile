import type { EmitFn } from 'vuesax-alpha/es/utils';
import type { ExtractPropTypes } from 'vue';
import type Table from './table.vue';
export declare type TableModelValueType = string | number | object;
export declare const tableProps: {
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (TableModelValueType | TableModelValueType[]) & {}) | (() => TableModelValueType | TableModelValueType[]) | ((new (...args: any[]) => (TableModelValueType | TableModelValueType[]) & {}) | (() => TableModelValueType | TableModelValueType[]))[], unknown, unknown, null, boolean>;
    readonly striped: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly loading: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly multiple: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
};
export declare type TableProps = ExtractPropTypes<typeof tableProps>;
export declare const tableEmits: {
    "update:modelValue": (value: TableModelValueType) => boolean;
};
export declare type TableEmits = typeof tableEmits;
export declare type TableEmitFn = EmitFn<TableEmits>;
export declare type TableInstance = InstanceType<typeof Table>;
