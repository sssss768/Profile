import { unref } from 'vue';
declare const _default: import("vue").DefineComponent<{
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly data: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType) | ((new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType))[], unknown, unknown, null, boolean>;
    readonly isSelected: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
    readonly notClickSelected: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly openExpandOnlyTd: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    props: import("@vue/shared").LooseRequired<{
        readonly data: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType) | ((new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType))[], unknown, unknown>;
        readonly isSelected: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly color?: import("../../..").Color | undefined;
        readonly notClickSelected?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly openExpandOnlyTd?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly onClick?: ((event: Event | MouseEvent) => any) | undefined;
        readonly onSelected?: ((value: import("./table").TableModelValueType) => any) | undefined;
    } & {}>;
    emit: ((event: "click", event: Event | MouseEvent) => void) & ((event: "selected", value: import("./table").TableModelValueType) => void);
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    table: import("vuesax-alpha/es/tokens").TableContext;
    trRef: import("vue").Ref<HTMLElement | undefined>;
    contentExpandRef: import("vue").Ref<HTMLElement | undefined>;
    expand: import("vue").Ref<boolean>;
    isSelected: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
    vsBaseClasses: string[];
    trKls: import("vue").ComputedRef<(string | string[])[]>;
    trStyles: import("vue").ComputedRef<Record<string, string>[]>;
    click: (evs: any) => void;
    unref: typeof unref;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (event: Event | MouseEvent) => boolean;
    selected: (value: import("./table").TableModelValueType) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly data: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType) | ((new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType))[], unknown, unknown, null, boolean>;
    readonly isSelected: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
    readonly notClickSelected: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly openExpandOnlyTd: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    onClick?: ((event: Event | MouseEvent) => any) | undefined;
    onSelected?: ((value: import("./table").TableModelValueType) => any) | undefined;
}, {
    readonly data: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType) | ((new (...args: any[]) => import("./table").TableModelValueType & {}) | (() => import("./table").TableModelValueType))[], unknown, unknown>;
    readonly isSelected: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>;
export default _default;
