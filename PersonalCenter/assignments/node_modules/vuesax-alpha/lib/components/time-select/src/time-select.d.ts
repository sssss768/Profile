import type { Component, ExtractPropTypes, PropType } from 'vue';
import type TimeSelect from './time-select.vue';
export declare const timeSelectProps: {
    format: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: StringConstructor;
    };
    disabled: {
        type: BooleanConstructor;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    effect: {
        type: PropType<string>;
        default: null;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
    };
    start: {
        type: StringConstructor;
        default: string;
    };
    end: {
        type: StringConstructor;
        default: string;
    };
    step: {
        type: StringConstructor;
        default: string;
    };
    minTime: {
        type: StringConstructor;
    };
    maxTime: {
        type: StringConstructor;
    };
    name: {
        type: StringConstructor;
    };
    clearIcon: {
        type: PropType<string | Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
        default: () => import("vue").DefineComponent<{}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}, {}>;
    };
    disabledItems: {
        type: PropType<string[]>;
        default: () => never[];
    };
};
export declare type TimeSelectProps = ExtractPropTypes<typeof timeSelectProps>;
export declare type TimeSelectInstance = InstanceType<typeof TimeSelect>;
export interface TimeSelectExpose {
    /** focus to time select */
    readonly focus: () => void;
    /** blur time select */
    readonly blur: () => void;
}
