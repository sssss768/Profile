import { addUnit } from 'vuesax-alpha/es/utils';
declare const _default: import("vue").DefineComponent<{
    readonly border: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly customClass: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
    readonly duration: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 4500, boolean>;
    readonly flat: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly icon: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly iconSize: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "1.2rem", boolean>;
    readonly id: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
    readonly dangerousHtmlString: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly content: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) | ((new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>))[], unknown, unknown, "", boolean>;
    readonly loading: BooleanConstructor;
    readonly notPadding: BooleanConstructor;
    readonly offset: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    readonly onClick: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    } | ((new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    })[], unknown, unknown, () => undefined, boolean>;
    readonly onClickClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
        (): () => boolean;
        new (): any;
        readonly prototype: any;
    } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
        (): () => boolean;
        new (): any;
        readonly prototype: any;
    })[], unknown, unknown, () => true, boolean>;
    readonly onClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    } | ((new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    })[], unknown, unknown, () => undefined, boolean>;
    readonly position: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") | ((new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center"))[], "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center", unknown, "bottom-right", boolean>;
    readonly progressAuto: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "" | "square", unknown, "", boolean>;
    readonly showClose: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
    readonly sticky: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly title: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly width: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, null, boolean>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly title: string;
        readonly loading: boolean;
        readonly shape: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "" | "square", unknown>;
        readonly content: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) | ((new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>))[], unknown, unknown>;
        readonly offset: number;
        readonly position: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") | ((new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center"))[], "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center", unknown>;
        readonly width: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
        readonly id: string;
        readonly notPadding: boolean;
        readonly showClose: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly duration: number;
        readonly customClass: string;
        readonly iconSize: string;
        readonly dangerousHtmlString: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly onClickClose: () => boolean;
        readonly zIndex?: number | undefined;
        readonly color?: import("../../..").Color | undefined;
        readonly border?: import("../../..").Color | undefined;
        readonly flat?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly sticky?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly icon?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown> | undefined;
        readonly onClose?: (() => void) | undefined;
        readonly onClick?: (() => void) | undefined;
        readonly progressAuto?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
    } & {}>;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    zIndex: {
        initialZIndex: import("vue").ComputedRef<number>;
        currentZIndex: import("vue").ComputedRef<number>;
        nextZIndex: () => number;
    };
    currentZIndex: import("vue").ComputedRef<number>;
    nextZIndex: () => number;
    color: import("vue").ComputedRef<import("../../..").Color | undefined>;
    notifyRef: import("vue").Ref<HTMLElement | undefined>;
    visible: import("vue").Ref<boolean>;
    timer: (() => void) | undefined;
    vsBaseClasses: string[];
    notifyKls: import("vue").ComputedRef<(string | string[])[]>;
    notifyStyles: import("vue").ComputedRef<(Record<string, string> | {
        zIndex: number;
    })[]>;
    handleClick: () => void;
    handleClickClose: () => void;
    onTransitionBeforeEnter: (el: Element) => void;
    onTransitionEnter: (el: Element, done: () => void) => void;
    onTransitionLeave: (_: Element, done: () => void) => void;
    startTimer: () => void;
    clearTimer: () => void;
    open: () => void;
    close: () => void;
    intervalProgress: number;
    currentProgress: import("vue").Ref<number>;
    handleProgress: () => void;
    readonly IconClose: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }>>, {
        readonly scale: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    }, {}>> & Record<string, any>;
    readonly VsIcon: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly size: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly color: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color, "", boolean>;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly color: import("../../..").Color;
            readonly size?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown> | undefined;
        } & {}>;
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        style: import("vue").ComputedRef<import("vue").CSSProperties>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly size: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly color: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color, "", boolean>;
    }>>, {
        readonly color: import("../../..").Color;
    }, {}>> & Record<string, any>;
    readonly addUnit: typeof addUnit;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly border: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly customClass: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
    readonly duration: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 4500, boolean>;
    readonly flat: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly icon: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly iconSize: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "1.2rem", boolean>;
    readonly id: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
    readonly dangerousHtmlString: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly content: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) | ((new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>))[], unknown, unknown, "", boolean>;
    readonly loading: BooleanConstructor;
    readonly notPadding: BooleanConstructor;
    readonly offset: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    readonly onClick: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    } | ((new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    })[], unknown, unknown, () => undefined, boolean>;
    readonly onClickClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
        (): () => boolean;
        new (): any;
        readonly prototype: any;
    } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
        (): () => boolean;
        new (): any;
        readonly prototype: any;
    })[], unknown, unknown, () => true, boolean>;
    readonly onClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    } | ((new (...args: any[]) => () => void) | (() => () => void) | {
        (): () => void;
        new (): any;
        readonly prototype: any;
    })[], unknown, unknown, () => undefined, boolean>;
    readonly position: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") | ((new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center"))[], "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center", unknown, "bottom-right", boolean>;
    readonly progressAuto: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "" | "square", unknown, "", boolean>;
    readonly showClose: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
    readonly sticky: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly title: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
    readonly zIndex: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly width: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, null, boolean>;
}>>, {
    readonly title: string;
    readonly loading: boolean;
    readonly shape: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "" | "square", unknown>;
    readonly content: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) | ((new (...args: any[]) => (string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) & {}) | (() => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>))[], unknown, unknown>;
    readonly offset: number;
    readonly position: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") | ((new (...args: any[]) => ("top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center") & {}) | (() => "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center"))[], "top-right" | "bottom-right" | "bottom-left" | "top-left" | "top-center" | "bottom-center", unknown>;
    readonly width: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    readonly id: string;
    readonly notPadding: boolean;
    readonly onClose: () => void;
    readonly onClick: () => void;
    readonly showClose: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly duration: number;
    readonly customClass: string;
    readonly iconSize: string;
    readonly dangerousHtmlString: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly onClickClose: () => boolean;
}, {}>;
export default _default;
