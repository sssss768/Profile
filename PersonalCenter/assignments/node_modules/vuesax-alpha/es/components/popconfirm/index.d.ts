export declare const VsPopconfirm: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
    readonly title: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly confirmButtonText: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly cancelButtonText: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly confirmButtonColor: {
        readonly default: "primary";
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly confirmButtonType: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown, "flat", boolean>;
    readonly confirmButtonSize: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown, "small", boolean>;
    readonly cancelButtonColor: {
        readonly default: "text";
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly cancelButtonType: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown, "transparent", boolean>;
    readonly cancelButtonSize: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown, "small", boolean>;
    readonly icon: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown, () => import("vue").DefineComponent<{}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>, boolean>;
    readonly iconColor: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "#f90", boolean>;
    readonly hideIcon: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly hideAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 200, boolean>;
    readonly teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    readonly persistent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly width: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, 200, boolean>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly width: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
        readonly animation: string;
        readonly icon: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown>;
        readonly hideAfter: number;
        readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly confirmButtonColor: import("../..").Color;
        readonly confirmButtonType: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown>;
        readonly confirmButtonSize: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown>;
        readonly cancelButtonColor: import("../..").Color;
        readonly cancelButtonType: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown>;
        readonly cancelButtonSize: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown>;
        readonly iconColor: string;
        readonly hideIcon: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly title?: string | undefined;
        readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly confirmButtonText?: string | undefined;
        readonly cancelButtonText?: string | undefined;
        readonly onConfirm?: ((e: MouseEvent) => any) | undefined;
        readonly onCancel?: ((e: MouseEvent) => any) | undefined;
    } & {}>;
    emit: ((event: "confirm", e: MouseEvent) => void) & ((event: "cancel", e: MouseEvent) => void);
    t: import("../..").Translator;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    tooltipRef: import("vue").Ref<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            zIndex?: number | undefined;
            shift?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown> | undefined;
            offset?: import("../..").OffsetOptions | undefined;
            visible?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never> | undefined;
            flip?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown> | undefined;
            animation?: string | undefined;
            showAfter?: number | undefined;
            hideAfter?: number | undefined;
            autoClose?: number | undefined;
            teleported?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            strategy?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown> | undefined;
            placement?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown> | undefined;
            interactivity?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            windowResize?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            windowScroll?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            showArrow?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            popperClass?: (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
            popperStyle?: import("vue").StyleValue | undefined;
            trigger?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown> | undefined;
            processBeforeOpen?: (() => boolean) | undefined;
            processBeforeClose?: (() => boolean) | undefined;
            key?: string | number | symbol | undefined;
            readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            style?: unknown;
            readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly content?: string | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            readonly onFocus?: ((e: Event) => boolean | void) | undefined;
            readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
            readonly onBlur?: ((e: Event) => boolean | void) | undefined;
            readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
            readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
            readonly onClick?: ((e: Event) => boolean | void) | undefined;
            readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
            readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly virtualRef?: import("../..").Measurable | undefined;
            readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
            readonly triggerClass?: (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
            readonly triggerStyle?: import("vue").StyleValue | undefined;
            readonly "onUpdate:visible"?: ((val: boolean) => void) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            processBeforeOpen: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
                (): () => boolean;
                new (): any;
                readonly prototype: any;
            } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
                (): () => boolean;
                new (): any;
                readonly prototype: any;
            })[], unknown, unknown, () => true, boolean>;
            processBeforeClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
                (): () => boolean;
                new (): any;
                readonly prototype: any;
            } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
                (): () => boolean;
                new (): any;
                readonly prototype: any;
            })[], unknown, unknown, () => true, boolean>;
            showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            loading: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never, null, false>;
            "onUpdate:visible": {
                readonly type: import("vue").PropType<(val: boolean) => void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
            virtualRef: {
                readonly type: import("vue").PropType<import("../..").Measurable>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            virtualTriggering: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseenter: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseleave: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onClick: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onKeydown: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onFocus: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onBlur: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onContextmenu: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerClass: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerStyle: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
            appendTo: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
            fit: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
            zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
            interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
            content: {
                readonly type: import("vue").PropType<string>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            rawContent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
            popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
            persistent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            showAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
            hideAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 200, boolean>;
            autoClose: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            selector: import("vue").ComputedRef<string>;
            id: import("vue").ComputedRef<string>;
            appendTo: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
            props: import("@vue/shared").LooseRequired<{
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                readonly zIndex: number;
                readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                readonly offset: import("../..").OffsetOptions;
                readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never>;
                readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                readonly animation: string;
                readonly showAfter: number;
                readonly hideAfter: number;
                readonly autoClose: number;
                readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
                readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
                readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly popperClass: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                readonly popperStyle: import("vue").StyleValue;
                readonly trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
                readonly processBeforeOpen: () => boolean;
                readonly processBeforeClose: () => boolean;
                readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly content?: string | undefined;
                readonly onFocus?: ((e: Event) => boolean | void) | undefined;
                readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
                readonly onBlur?: ((e: Event) => boolean | void) | undefined;
                readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
                readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
                readonly onClick?: ((e: Event) => boolean | void) | undefined;
                readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
                readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly virtualRef?: import("../..").Measurable | undefined;
                readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
                readonly triggerClass?: (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
                readonly triggerStyle?: import("vue").StyleValue | undefined;
                readonly "onUpdate:visible"?: ((val: boolean) => void) | undefined;
            } & {}>;
            emit: (event: string, ...args: any[]) => void;
            currentZIndex: import("vue").ComputedRef<number>;
            nextZIndex: () => number;
            zIndex: import("vue").ComputedRef<number>;
            triggerRef: import("vue").Ref<import("../..").ReferenceElement | undefined>;
            contentRef: import("vue").Ref<HTMLElement | undefined>;
            arrowRef: import("vue").Ref<HTMLElement | undefined>;
            open: import("vue").Ref<boolean>;
            toggleReason: import("vue").Ref<Event | undefined>;
            show: (event?: Event | undefined) => void;
            hide: (event?: Event | undefined) => void;
            hasUpdateHandler: import("vue").ComputedRef<boolean>;
            onOpen: (event?: Event | undefined) => void;
            onClose: (event?: Event | undefined) => void;
            update: () => void;
            popperPlacement: Readonly<import("vue").Ref<import("..").PopperPlacement>>;
            floatingStyles: Readonly<import("vue").Ref<{
                position: import("../..").Strategy;
                top: string;
                left: string;
                transform?: string | undefined;
                willChange?: string | undefined;
            }>>;
            controlled: import("vue").ComputedRef<boolean>;
            updatePopper: (shouldUpdateZIndex?: boolean) => void;
            onBlur: () => void;
            isFocusInsideContent: () => boolean;
            popperContent: import("vue").DefineComponent<{
                animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
                appendTo: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
                teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                disabled: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
                fit: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
                zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
                interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown, () => {}, boolean>;
                shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown, () => {}, boolean>;
                windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
                content: {
                    readonly type: import("vue").PropType<string>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                rawContent: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
                popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
                persistent: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
            }, {
                ns: {
                    namespace: import("vue").ComputedRef<string>;
                    b: (blockSuffix?: string) => string;
                    e: (element?: string | undefined) => string;
                    m: (modifier?: string | undefined) => string;
                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                    is: {
                        (name: string, state: boolean | undefined): string;
                        (name: string): string;
                    };
                    cssVar: (object: Record<string, string>) => Record<string, string>;
                    cssVarName: (name: string) => string;
                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                    cssVarBlockName: (name: string) => string;
                };
                contentRef: import("vue").Ref<HTMLElement | undefined>;
                controlled: import("vue").Ref<boolean>;
                open: import("vue").Ref<boolean>;
                trigger: import("vue").Ref<import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>>;
                updatePopper: (shouldUpdateZIndex?: boolean | undefined) => void;
                onOpen: (e?: Event | undefined) => void;
                onClose: (e?: Event | undefined) => void;
                onShow: () => void;
                onHide: () => void;
                onBeforeShow: () => void;
                onBeforeHide: () => void;
                props: import("@vue/shared").LooseRequired<{
                    readonly zIndex: number;
                    readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        limiter?: {
                            fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                            options?: any;
                        } | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }) & {}) | (() => boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        limiter?: {
                            fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                            options?: any;
                        } | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }) | ((new (...args: any[]) => (boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        limiter?: {
                            fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                            options?: any;
                        } | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }) & {}) | (() => boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        limiter?: {
                            fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                            options?: any;
                        } | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }))[], unknown, unknown>;
                    readonly offset: import("../..").OffsetOptions;
                    readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
                    readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                        flipAlignment?: boolean | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }) & {}) | (() => boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                        flipAlignment?: boolean | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }) | ((new (...args: any[]) => (boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                        flipAlignment?: boolean | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }) & {}) | (() => boolean | {
                        padding?: import("../..").Padding | undefined;
                        rootBoundary?: import("../..").RootBoundary | undefined;
                        elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                        altBoundary?: boolean | undefined;
                        mainAxis?: boolean | undefined;
                        crossAxis?: boolean | undefined;
                        fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                        flipAlignment?: boolean | undefined;
                        boundary?: import("../..").Boundary | undefined;
                    }))[], unknown, unknown>;
                    readonly animation: string;
                    readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
                    readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
                    readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly popperClass: string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[];
                    readonly popperStyle: import("vue").StyleValue;
                    readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                    readonly content?: string | undefined;
                    readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
                    readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                    readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                    readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                    readonly onClose?: (() => any) | undefined;
                    readonly onFocus?: (() => any) | undefined;
                    readonly onMouseleave?: ((evt: MouseEvent) => any) | undefined;
                    readonly onBlur?: (() => any) | undefined;
                    readonly onMouseenter?: ((evt: MouseEvent) => any) | undefined;
                } & {}>;
                destroyed: import("vue").Ref<boolean>;
                persistentRef: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined>;
                shouldRender: import("vue").ComputedRef<boolean>;
                shouldShow: import("vue").ComputedRef<boolean>;
                popperKls: import("vue").ComputedRef<(string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[])[]>;
                togglePopperAlive: () => void;
                stopWhenControlled: () => true | undefined;
                onContentEnter: (event: unknown) => void;
                onContentLeave: (event: unknown) => void;
                onTransitionLeave: () => void;
                onBeforeEnter: () => void;
                onBeforeLeave: () => void;
                stopHandle: (() => void) | undefined;
                onAfterShow: () => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
                mouseenter: (evt: MouseEvent) => boolean;
                mouseleave: (evt: MouseEvent) => boolean;
                focus: () => boolean;
                blur: () => boolean;
                close: () => boolean;
            }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
                appendTo: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
                teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                disabled: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
                fit: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
                zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
                interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown, () => {}, boolean>;
                shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown, () => {}, boolean>;
                windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
                offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
                content: {
                    readonly type: import("vue").PropType<string>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                rawContent: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
                popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
                persistent: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
            }>> & {
                onClose?: (() => any) | undefined;
                onFocus?: (() => any) | undefined;
                onMouseleave?: ((evt: MouseEvent) => any) | undefined;
                onBlur?: (() => any) | undefined;
                onMouseenter?: ((evt: MouseEvent) => any) | undefined;
            }, {
                zIndex: number;
                shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                offset: import("../..").OffsetOptions;
                visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
                flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                animation: string;
                teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
                placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
                interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                popperClass: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                popperStyle: import("vue").StyleValue;
            }, {}>;
            popperTrigger: import("vue").DefineComponent<{
                disabled: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
                virtualRef: {
                    readonly type: import("vue").PropType<import("../..").Measurable>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                virtualTriggering: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onMouseenter: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onMouseleave: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onClick: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onKeydown: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onFocus: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onBlur: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onContextmenu: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                triggerClass: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                triggerStyle: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
            }, {
                ns: {
                    namespace: import("vue").ComputedRef<string>;
                    b: (blockSuffix?: string) => string;
                    e: (element?: string | undefined) => string;
                    m: (modifier?: string | undefined) => string;
                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                    is: {
                        (name: string, state: boolean | undefined): string;
                        (name: string): string;
                    };
                    cssVar: (object: Record<string, string>) => Record<string, string>;
                    cssVarName: (name: string) => string;
                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                    cssVarBlockName: (name: string) => string;
                };
                triggerRef: import("vue").Ref<import("../..").ReferenceElement | undefined>;
                onOpen: (e?: Event | undefined) => void;
                onClose: (e?: Event | undefined) => void;
                onToggle: (e: Event) => void;
                props: import("@vue/shared").LooseRequired<{
                    readonly trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
                    readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                    readonly onFocus?: ((e: Event) => boolean | void) | undefined;
                    readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
                    readonly onBlur?: ((e: Event) => boolean | void) | undefined;
                    readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
                    readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
                    readonly onClick?: ((e: Event) => boolean | void) | undefined;
                    readonly virtualRef?: import("../..").Measurable | undefined;
                    readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                    readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
                    readonly triggerClass?: (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
                    readonly triggerStyle?: import("vue").StyleValue | undefined;
                } & {}>;
                stopWhenControlledOrDisabled: () => true | undefined;
                trigger: import("vue").Ref<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>>;
                onMouseenter: (event: Event) => void;
                onMouseleave: (event: Event) => void;
                onClick: (event: Event) => void;
                onFocus: (event: Event) => void;
                onBlur: (event: Event) => void;
                onContextMenu: (event: Event) => void;
                readonly VsOnlyChild: import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }> | null, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                disabled: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
                virtualRef: {
                    readonly type: import("vue").PropType<import("../..").Measurable>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                virtualTriggering: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onMouseenter: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onMouseleave: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onClick: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onKeydown: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onFocus: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onBlur: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                onContextmenu: {
                    readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                triggerClass: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
                triggerStyle: {
                    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __vsPropKey: true;
                };
            }>>, {
                trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
            }, {}>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            zIndex: number;
            shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            offset: import("../..").OffsetOptions;
            visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never>;
            flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            animation: string;
            showAfter: number;
            hideAfter: number;
            autoClose: number;
            teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
            placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
            interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
            processBeforeOpen: () => boolean;
            processBeforeClose: () => boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        processBeforeOpen: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        })[], unknown, unknown, () => true, boolean>;
        processBeforeClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        })[], unknown, unknown, () => true, boolean>;
        showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        loading: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never, null, false>;
        "onUpdate:visible": {
            readonly type: import("vue").PropType<(val: boolean) => void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        disabled: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
        virtualRef: {
            readonly type: import("vue").PropType<import("../..").Measurable>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        virtualTriggering: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onMouseenter: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onMouseleave: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onClick: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onKeydown: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onFocus: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onBlur: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onContextmenu: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        triggerClass: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        triggerStyle: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
        appendTo: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
        fit: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
        zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
        interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown, () => {}, boolean>;
        shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown, () => {}, boolean>;
        windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
        content: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        rawContent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
        popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
        persistent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        showAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
        hideAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 200, boolean>;
        autoClose: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        selector: import("vue").ComputedRef<string>;
        id: import("vue").ComputedRef<string>;
        appendTo: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        props: import("@vue/shared").LooseRequired<{
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            readonly zIndex: number;
            readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            readonly offset: import("../..").OffsetOptions;
            readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never>;
            readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            readonly animation: string;
            readonly showAfter: number;
            readonly hideAfter: number;
            readonly autoClose: number;
            readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
            readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
            readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly popperClass: string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            readonly popperStyle: import("vue").StyleValue;
            readonly trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
            readonly processBeforeOpen: () => boolean;
            readonly processBeforeClose: () => boolean;
            readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly content?: string | undefined;
            readonly onFocus?: ((e: Event) => boolean | void) | undefined;
            readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
            readonly onBlur?: ((e: Event) => boolean | void) | undefined;
            readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
            readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
            readonly onClick?: ((e: Event) => boolean | void) | undefined;
            readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
            readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly virtualRef?: import("../..").Measurable | undefined;
            readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
            readonly triggerClass?: (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
            readonly triggerStyle?: import("vue").StyleValue | undefined;
            readonly "onUpdate:visible"?: ((val: boolean) => void) | undefined;
        } & {}>;
        emit: (event: string, ...args: any[]) => void;
        currentZIndex: import("vue").ComputedRef<number>;
        nextZIndex: () => number;
        zIndex: import("vue").ComputedRef<number>;
        triggerRef: import("vue").Ref<import("../..").ReferenceElement | undefined>;
        contentRef: import("vue").Ref<HTMLElement | undefined>;
        arrowRef: import("vue").Ref<HTMLElement | undefined>;
        open: import("vue").Ref<boolean>;
        toggleReason: import("vue").Ref<Event | undefined>;
        show: (event?: Event | undefined) => void;
        hide: (event?: Event | undefined) => void;
        hasUpdateHandler: import("vue").ComputedRef<boolean>;
        onOpen: (event?: Event | undefined) => void;
        onClose: (event?: Event | undefined) => void;
        update: () => void;
        popperPlacement: Readonly<import("vue").Ref<import("..").PopperPlacement>>;
        floatingStyles: Readonly<import("vue").Ref<{
            position: import("../..").Strategy;
            top: string;
            left: string;
            transform?: string | undefined;
            willChange?: string | undefined;
        }>>;
        controlled: import("vue").ComputedRef<boolean>;
        updatePopper: (shouldUpdateZIndex?: boolean) => void;
        onBlur: () => void;
        isFocusInsideContent: () => boolean;
        popperContent: import("vue").DefineComponent<{
            animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
            appendTo: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
            teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
            fit: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
            zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
            interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
            content: {
                readonly type: import("vue").PropType<string>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            rawContent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
            popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
            persistent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            contentRef: import("vue").Ref<HTMLElement | undefined>;
            controlled: import("vue").Ref<boolean>;
            open: import("vue").Ref<boolean>;
            trigger: import("vue").Ref<import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>>;
            updatePopper: (shouldUpdateZIndex?: boolean | undefined) => void;
            onOpen: (e?: Event | undefined) => void;
            onClose: (e?: Event | undefined) => void;
            onShow: () => void;
            onHide: () => void;
            onBeforeShow: () => void;
            onBeforeHide: () => void;
            props: import("@vue/shared").LooseRequired<{
                readonly zIndex: number;
                readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                readonly offset: import("../..").OffsetOptions;
                readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
                readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                readonly animation: string;
                readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
                readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
                readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly popperClass: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                readonly popperStyle: import("vue").StyleValue;
                readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly content?: string | undefined;
                readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
                readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onClose?: (() => any) | undefined;
                readonly onFocus?: (() => any) | undefined;
                readonly onMouseleave?: ((evt: MouseEvent) => any) | undefined;
                readonly onBlur?: (() => any) | undefined;
                readonly onMouseenter?: ((evt: MouseEvent) => any) | undefined;
            } & {}>;
            destroyed: import("vue").Ref<boolean>;
            persistentRef: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined>;
            shouldRender: import("vue").ComputedRef<boolean>;
            shouldShow: import("vue").ComputedRef<boolean>;
            popperKls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[])[]>;
            togglePopperAlive: () => void;
            stopWhenControlled: () => true | undefined;
            onContentEnter: (event: unknown) => void;
            onContentLeave: (event: unknown) => void;
            onTransitionLeave: () => void;
            onBeforeEnter: () => void;
            onBeforeLeave: () => void;
            stopHandle: (() => void) | undefined;
            onAfterShow: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            mouseenter: (evt: MouseEvent) => boolean;
            mouseleave: (evt: MouseEvent) => boolean;
            focus: () => boolean;
            blur: () => boolean;
            close: () => boolean;
        }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
            appendTo: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
            teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
            fit: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
            zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
            interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
            content: {
                readonly type: import("vue").PropType<string>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            rawContent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
            popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
            persistent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }>> & {
            onClose?: (() => any) | undefined;
            onFocus?: (() => any) | undefined;
            onMouseleave?: ((evt: MouseEvent) => any) | undefined;
            onBlur?: (() => any) | undefined;
            onMouseenter?: ((evt: MouseEvent) => any) | undefined;
        }, {
            zIndex: number;
            shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            offset: import("../..").OffsetOptions;
            visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
            flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            animation: string;
            teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
            placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
            interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
        }, {}>;
        popperTrigger: import("vue").DefineComponent<{
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
            virtualRef: {
                readonly type: import("vue").PropType<import("../..").Measurable>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            virtualTriggering: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseenter: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseleave: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onClick: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onKeydown: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onFocus: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onBlur: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onContextmenu: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerClass: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerStyle: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            triggerRef: import("vue").Ref<import("../..").ReferenceElement | undefined>;
            onOpen: (e?: Event | undefined) => void;
            onClose: (e?: Event | undefined) => void;
            onToggle: (e: Event) => void;
            props: import("@vue/shared").LooseRequired<{
                readonly trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
                readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onFocus?: ((e: Event) => boolean | void) | undefined;
                readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
                readonly onBlur?: ((e: Event) => boolean | void) | undefined;
                readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
                readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
                readonly onClick?: ((e: Event) => boolean | void) | undefined;
                readonly virtualRef?: import("../..").Measurable | undefined;
                readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
                readonly triggerClass?: (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
                readonly triggerStyle?: import("vue").StyleValue | undefined;
            } & {}>;
            stopWhenControlledOrDisabled: () => true | undefined;
            trigger: import("vue").Ref<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>>;
            onMouseenter: (event: Event) => void;
            onMouseleave: (event: Event) => void;
            onClick: (event: Event) => void;
            onFocus: (event: Event) => void;
            onBlur: (event: Event) => void;
            onContextMenu: (event: Event) => void;
            readonly VsOnlyChild: import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | null, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
            virtualRef: {
                readonly type: import("vue").PropType<import("../..").Measurable>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            virtualTriggering: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseenter: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseleave: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onClick: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onKeydown: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onFocus: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onBlur: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onContextmenu: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerClass: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerStyle: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }>>, {
            trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
        }, {}>;
    }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
    hidePopper: () => void;
    style: import("vue").ComputedRef<{
        width: string | undefined;
    }>;
    confirm: (e: MouseEvent) => void;
    cancel: (e: MouseEvent) => void;
    finalConfirmButtonText: import("vue").ComputedRef<string>;
    finalCancelButtonText: import("vue").ComputedRef<string>;
    readonly VsButton: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly active: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly animateInactive: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly animationType: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "scale" | "vertical" | "rotate", unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly block: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly color: {
            readonly default: "primary";
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            readonly __vsPropKey: true;
        };
        readonly icon: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly loading: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly shape: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "circle" | "square", unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly size: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [NumberConstructor, StringConstructor], "default" | "small" | "large" | "xl" | "mini", unknown, "default", boolean>;
        readonly ripple: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "reverse" | "cut", unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly type: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown, "default", boolean>;
        readonly upload: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly border: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly flat: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly floating: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly gradient: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly shadow: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly relief: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly transparent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly square: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly circle: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly to: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<readonly [StringConstructor, ObjectConstructor], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly href: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly blank: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly type: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown>;
            readonly color: import("../..").Color;
            readonly size: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [NumberConstructor, StringConstructor], "default" | "small" | "large" | "xl" | "mini", unknown>;
            readonly border?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly flat?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly gradient?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly relief?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly shadow?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly shape?: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "circle" | "square", unknown> | undefined;
            readonly circle?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly square?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly transparent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly block?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly icon?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly active?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly animateInactive?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly animationType?: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "scale" | "vertical" | "rotate", unknown> | undefined;
            readonly ripple?: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "reverse" | "cut", unknown> | undefined;
            readonly floating?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly upload?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly to?: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [StringConstructor, ObjectConstructor], unknown, unknown> | undefined;
            readonly href?: string | undefined;
            readonly blank?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        } & {}>;
        slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        root$: import("vue").Ref<HTMLElement | undefined>;
        vsBaseClasses: string[];
        buttonClasses: import("vue").ComputedRef<(string | false | string[] | undefined)[]>;
        buttonStyles: import("vue").ComputedRef<Record<string, string>[]>;
        mouseDown: (evs: MouseEvent) => void;
        readonly IconLoading: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
        }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>> & Record<string, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly active: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly animateInactive: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly animationType: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "scale" | "vertical" | "rotate", unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly block: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly color: {
            readonly default: "primary";
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            readonly __vsPropKey: true;
        };
        readonly icon: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly loading: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly shape: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "circle" | "square", unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly size: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [NumberConstructor, StringConstructor], "default" | "small" | "large" | "xl" | "mini", unknown, "default", boolean>;
        readonly ripple: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "reverse" | "cut", unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly type: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown, "default", boolean>;
        readonly upload: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly border: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly flat: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly floating: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly gradient: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly shadow: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly relief: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly transparent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly square: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly circle: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly to: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<readonly [StringConstructor, ObjectConstructor], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly href: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly blank: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>>, {
        readonly type: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown>;
        readonly color: import("../..").Color;
        readonly size: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [NumberConstructor, StringConstructor], "default" | "small" | "large" | "xl" | "mini", unknown>;
    }, {}>> & {
        ButtonGroup: import("vue").DefineComponent<{}, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
        }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>;
    };
    readonly VsIcon: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly size: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly color: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color, "", boolean>;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly color: import("../..").Color;
            readonly size?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown> | undefined;
        } & {}>;
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        style: import("vue").ComputedRef<import("vue").CSSProperties>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly size: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly color: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color, "", boolean>;
    }>>, {
        readonly color: import("../..").Color;
    }, {}>> & Record<string, any>;
    readonly VsPopper: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        processBeforeOpen: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        })[], unknown, unknown, () => true, boolean>;
        processBeforeClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        })[], unknown, unknown, () => true, boolean>;
        showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        loading: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never, null, false>;
        "onUpdate:visible": {
            readonly type: import("vue").PropType<(val: boolean) => void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        disabled: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
        virtualRef: {
            readonly type: import("vue").PropType<import("../..").Measurable>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        virtualTriggering: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onMouseenter: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onMouseleave: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onClick: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onKeydown: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onFocus: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onBlur: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onContextmenu: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        triggerClass: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        triggerStyle: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
        appendTo: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
        fit: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
        zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
        interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown, () => {}, boolean>;
        shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown, () => {}, boolean>;
        windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
        content: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        rawContent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
        popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
        persistent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        showAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
        hideAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 200, boolean>;
        autoClose: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    }, {
        selector: import("vue").ComputedRef<string>;
        id: import("vue").ComputedRef<string>;
        appendTo: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        props: import("@vue/shared").LooseRequired<{
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            readonly zIndex: number;
            readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            readonly offset: import("../..").OffsetOptions;
            readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never>;
            readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            readonly animation: string;
            readonly showAfter: number;
            readonly hideAfter: number;
            readonly autoClose: number;
            readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
            readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
            readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly popperClass: string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            readonly popperStyle: import("vue").StyleValue;
            readonly trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
            readonly processBeforeOpen: () => boolean;
            readonly processBeforeClose: () => boolean;
            readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly content?: string | undefined;
            readonly onFocus?: ((e: Event) => boolean | void) | undefined;
            readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
            readonly onBlur?: ((e: Event) => boolean | void) | undefined;
            readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
            readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
            readonly onClick?: ((e: Event) => boolean | void) | undefined;
            readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
            readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly virtualRef?: import("../..").Measurable | undefined;
            readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
            readonly triggerClass?: (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
            readonly triggerStyle?: import("vue").StyleValue | undefined;
            readonly "onUpdate:visible"?: ((val: boolean) => void) | undefined;
        } & {}>;
        emit: (event: string, ...args: any[]) => void;
        currentZIndex: import("vue").ComputedRef<number>;
        nextZIndex: () => number;
        zIndex: import("vue").ComputedRef<number>;
        triggerRef: import("vue").Ref<import("../..").ReferenceElement | undefined>;
        contentRef: import("vue").Ref<HTMLElement | undefined>;
        arrowRef: import("vue").Ref<HTMLElement | undefined>;
        open: import("vue").Ref<boolean>;
        toggleReason: import("vue").Ref<Event | undefined>;
        show: (event?: Event | undefined) => void;
        hide: (event?: Event | undefined) => void;
        hasUpdateHandler: import("vue").ComputedRef<boolean>;
        onOpen: (event?: Event | undefined) => void;
        onClose: (event?: Event | undefined) => void;
        update: () => void;
        popperPlacement: Readonly<import("vue").Ref<import("..").PopperPlacement>>;
        floatingStyles: Readonly<import("vue").Ref<{
            position: import("../..").Strategy;
            top: string;
            left: string;
            transform?: string | undefined;
            willChange?: string | undefined;
        }>>;
        controlled: import("vue").ComputedRef<boolean>;
        updatePopper: (shouldUpdateZIndex?: boolean) => void;
        onBlur: () => void;
        isFocusInsideContent: () => boolean;
        popperContent: import("vue").DefineComponent<{
            animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
            appendTo: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
            teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
            fit: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
            zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
            interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
            content: {
                readonly type: import("vue").PropType<string>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            rawContent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
            popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
            persistent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            contentRef: import("vue").Ref<HTMLElement | undefined>;
            controlled: import("vue").Ref<boolean>;
            open: import("vue").Ref<boolean>;
            trigger: import("vue").Ref<import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>>;
            updatePopper: (shouldUpdateZIndex?: boolean | undefined) => void;
            onOpen: (e?: Event | undefined) => void;
            onClose: (e?: Event | undefined) => void;
            onShow: () => void;
            onHide: () => void;
            onBeforeShow: () => void;
            onBeforeHide: () => void;
            props: import("@vue/shared").LooseRequired<{
                readonly zIndex: number;
                readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    limiter?: {
                        fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                        options?: any;
                    } | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                readonly offset: import("../..").OffsetOptions;
                readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
                readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) | ((new (...args: any[]) => (boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }) & {}) | (() => boolean | {
                    padding?: import("../..").Padding | undefined;
                    rootBoundary?: import("../..").RootBoundary | undefined;
                    elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                    altBoundary?: boolean | undefined;
                    mainAxis?: boolean | undefined;
                    crossAxis?: boolean | undefined;
                    fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                    fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                    fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                    flipAlignment?: boolean | undefined;
                    boundary?: import("../..").Boundary | undefined;
                }))[], unknown, unknown>;
                readonly animation: string;
                readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
                readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
                readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly popperClass: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                readonly popperStyle: import("vue").StyleValue;
                readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly content?: string | undefined;
                readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
                readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onClose?: (() => any) | undefined;
                readonly onFocus?: (() => any) | undefined;
                readonly onMouseleave?: ((evt: MouseEvent) => any) | undefined;
                readonly onBlur?: (() => any) | undefined;
                readonly onMouseenter?: ((evt: MouseEvent) => any) | undefined;
            } & {}>;
            destroyed: import("vue").Ref<boolean>;
            persistentRef: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined>;
            shouldRender: import("vue").ComputedRef<boolean>;
            shouldShow: import("vue").ComputedRef<boolean>;
            popperKls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[])[]>;
            togglePopperAlive: () => void;
            stopWhenControlled: () => true | undefined;
            onContentEnter: (event: unknown) => void;
            onContentLeave: (event: unknown) => void;
            onTransitionLeave: () => void;
            onBeforeEnter: () => void;
            onBeforeLeave: () => void;
            stopHandle: (() => void) | undefined;
            onAfterShow: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            mouseenter: (evt: MouseEvent) => boolean;
            mouseleave: (evt: MouseEvent) => boolean;
            focus: () => boolean;
            blur: () => boolean;
            close: () => boolean;
        }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
            appendTo: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
            teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
            fit: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
            zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
            interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown, () => {}, boolean>;
            windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
            offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
            content: {
                readonly type: import("vue").PropType<string>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            rawContent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
            popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
            persistent: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }>> & {
            onClose?: (() => any) | undefined;
            onFocus?: (() => any) | undefined;
            onMouseleave?: ((evt: MouseEvent) => any) | undefined;
            onBlur?: (() => any) | undefined;
            onMouseenter?: ((evt: MouseEvent) => any) | undefined;
        }, {
            zIndex: number;
            shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                limiter?: {
                    fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                    options?: any;
                } | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            offset: import("../..").OffsetOptions;
            visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
            flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) | ((new (...args: any[]) => (boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }) & {}) | (() => boolean | {
                padding?: import("../..").Padding | undefined;
                rootBoundary?: import("../..").RootBoundary | undefined;
                elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
                altBoundary?: boolean | undefined;
                mainAxis?: boolean | undefined;
                crossAxis?: boolean | undefined;
                fallbackPlacements?: import("..").PopperPlacement[] | undefined;
                fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
                fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
                flipAlignment?: boolean | undefined;
                boundary?: import("../..").Boundary | undefined;
            }))[], unknown, unknown>;
            animation: string;
            teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
            placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
            interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
        }, {}>;
        popperTrigger: import("vue").DefineComponent<{
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
            virtualRef: {
                readonly type: import("vue").PropType<import("../..").Measurable>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            virtualTriggering: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseenter: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseleave: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onClick: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onKeydown: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onFocus: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onBlur: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onContextmenu: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerClass: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerStyle: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            triggerRef: import("vue").Ref<import("../..").ReferenceElement | undefined>;
            onOpen: (e?: Event | undefined) => void;
            onClose: (e?: Event | undefined) => void;
            onToggle: (e: Event) => void;
            props: import("@vue/shared").LooseRequired<{
                readonly trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
                readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onFocus?: ((e: Event) => boolean | void) | undefined;
                readonly onMouseleave?: ((e: Event) => boolean | void) | undefined;
                readonly onBlur?: ((e: Event) => boolean | void) | undefined;
                readonly onMouseenter?: ((e: Event) => boolean | void) | undefined;
                readonly onKeydown?: ((e: Event) => boolean | void) | undefined;
                readonly onClick?: ((e: Event) => boolean | void) | undefined;
                readonly virtualRef?: import("../..").Measurable | undefined;
                readonly virtualTriggering?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
                readonly onContextmenu?: ((e: Event) => boolean | void) | undefined;
                readonly triggerClass?: (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
                readonly triggerStyle?: import("vue").StyleValue | undefined;
            } & {}>;
            stopWhenControlledOrDisabled: () => true | undefined;
            trigger: import("vue").Ref<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>>;
            onMouseenter: (event: Event) => void;
            onMouseleave: (event: Event) => void;
            onClick: (event: Event) => void;
            onFocus: (event: Event) => void;
            onBlur: (event: Event) => void;
            onContextMenu: (event: Event) => void;
            readonly VsOnlyChild: import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | null, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            disabled: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
            virtualRef: {
                readonly type: import("vue").PropType<import("../..").Measurable>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            virtualTriggering: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseenter: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onMouseleave: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onClick: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onKeydown: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onFocus: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onBlur: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            onContextmenu: {
                readonly type: import("vue").PropType<(e: Event) => boolean | void>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerClass: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
            triggerStyle: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }>>, {
            trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
        }, {}>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        processBeforeOpen: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        })[], unknown, unknown, () => true, boolean>;
        processBeforeClose: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => () => boolean) | (() => () => boolean) | {
            (): () => boolean;
            new (): any;
            readonly prototype: any;
        })[], unknown, unknown, () => true, boolean>;
        showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        loading: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never, null, false>;
        "onUpdate:visible": {
            readonly type: import("vue").PropType<(val: boolean) => void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        disabled: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        trigger: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown, string, boolean>;
        virtualRef: {
            readonly type: import("vue").PropType<import("../..").Measurable>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        virtualTriggering: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onMouseenter: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onMouseleave: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onClick: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onKeydown: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onFocus: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onBlur: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        onContextmenu: {
            readonly type: import("vue").PropType<(e: Event) => boolean | void>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        triggerClass: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        triggerStyle: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
        appendTo: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
        fit: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
        zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
        interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown, () => {}, boolean>;
        shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown, () => {}, boolean>;
        windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
        offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions) | ((new (...args: any[]) => import("../..").OffsetOptions & {}) | (() => import("../..").OffsetOptions))[], unknown, unknown, number, boolean>;
        content: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        rawContent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
        popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
        persistent: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        showAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
        hideAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 200, boolean>;
        autoClose: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 0, boolean>;
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        zIndex: number;
        shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../hooks/use-floating/core").MiddlewareState) => import("../..").Coords;
                options?: any;
            } | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown>;
        offset: import("../..").OffsetOptions;
        visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], never, never>;
        flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("../..").Padding | undefined;
            rootBoundary?: import("../..").RootBoundary | undefined;
            elementContext?: import("../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("..").PopperPlacement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("../..").Boundary | undefined;
        }))[], unknown, unknown>;
        animation: string;
        showAfter: number;
        hideAfter: number;
        autoClose: number;
        teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy) | ((new (...args: any[]) => import("../..").Strategy & {}) | (() => import("../..").Strategy))[], "fixed" | "absolute", unknown>;
        placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement) | ((new (...args: any[]) => import("..").PopperPlacement & {}) | (() => import("..").PopperPlacement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
        interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        popperClass: string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[];
        popperStyle: import("vue").StyleValue;
        trigger: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>) | ((new (...args: any[]) => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType> & {}) | (() => import("vuesax-alpha/es/utils").Arrayable<import("..").PopperTriggerType>))[], unknown, unknown>;
        processBeforeOpen: () => boolean;
        processBeforeClose: () => boolean;
    }, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    confirm: (e: MouseEvent) => boolean;
    cancel: (e: MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
    readonly title: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly confirmButtonText: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly cancelButtonText: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly confirmButtonColor: {
        readonly default: "primary";
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly confirmButtonType: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown, "flat", boolean>;
    readonly confirmButtonSize: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown, "small", boolean>;
    readonly cancelButtonColor: {
        readonly default: "text";
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __vsPropKey: true;
    };
    readonly cancelButtonType: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown, "transparent", boolean>;
    readonly cancelButtonSize: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown, "small", boolean>;
    readonly icon: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown, () => import("vue").DefineComponent<{}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>, boolean>;
    readonly iconColor: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "#f90", boolean>;
    readonly hideIcon: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly hideAfter: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, 200, boolean>;
    readonly teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    readonly persistent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly width: import("vuesax-alpha/es/utils").VsPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, 200, boolean>;
}>> & {
    onConfirm?: ((e: MouseEvent) => any) | undefined;
    onCancel?: ((e: MouseEvent) => any) | undefined;
}, {
    readonly width: import("vuesax-alpha/es/utils").VsPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
    readonly animation: string;
    readonly icon: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) | ((new (...args: any[]) => (string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>) & {}) | (() => string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>))[], unknown, unknown>;
    readonly hideAfter: number;
    readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly confirmButtonColor: import("../..").Color;
    readonly confirmButtonType: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown>;
    readonly confirmButtonSize: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown>;
    readonly cancelButtonColor: import("../..").Color;
    readonly cancelButtonType: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "border" | "flat" | "gradient" | "relief" | "shadow" | "transparent" | "floating", unknown>;
    readonly cancelButtonSize: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "default" | "small" | "large" | "xl" | "mini", unknown>;
    readonly iconColor: string;
    readonly hideIcon: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>> & Record<string, any>;
export default VsPopconfirm;
export * from './src/popconfirm';
