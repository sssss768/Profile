declare const _default: import("vue").DefineComponent<{
    color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    activeValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    inactiveValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    loading: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "square", unknown, null, boolean>;
    indeterminate: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    icon: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown>;
        readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly loading: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly shape: "square";
        readonly icon: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly indeterminate: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly activeValue: import("vuesax-alpha/es/utils").VsPropMergeType<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown>;
        readonly inactiveValue: import("vuesax-alpha/es/utils").VsPropMergeType<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown>;
        readonly color?: import("../../..").Color | undefined;
        readonly "onUpdate:modelValue"?: ((val: string | number | boolean) => any) | undefined;
        readonly onChange?: ((val: string | number | boolean) => any) | undefined;
        readonly onInput?: ((val: string | number | boolean) => any) | undefined;
    } & {}>;
    emit: ((event: "update:modelValue", val: string | number | boolean) => void) & ((event: "change", val: string | number | boolean) => void) & ((event: "input", val: string | number | boolean) => void);
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    color: import("vue").ComputedRef<import("../../..").Color | undefined>;
    isLoading: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
    checked: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
    handleChange: () => void;
    switchValue: () => void;
    vsBaseClasses: string[];
    switchKls: import("vue").ComputedRef<(string | string[])[]>;
    switchStyles: import("vue").ComputedRef<Record<string, string>[]>;
    readonly IconLoading: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (val: string | number | boolean) => boolean;
    change: (val: string | number | boolean) => boolean;
    input: (val: string | number | boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    activeValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    inactiveValue: import("vuesax-alpha/es/utils").VsPropFinalized<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown, boolean, boolean>;
    disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    loading: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "square", unknown, null, boolean>;
    indeterminate: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    icon: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
}>> & {
    "onUpdate:modelValue"?: ((val: string | number | boolean) => any) | undefined;
    onChange?: ((val: string | number | boolean) => any) | undefined;
    onInput?: ((val: string | number | boolean) => any) | undefined;
}, {
    modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown>;
    disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    loading: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    shape: "square";
    icon: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    indeterminate: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    activeValue: import("vuesax-alpha/es/utils").VsPropMergeType<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown>;
    inactiveValue: import("vuesax-alpha/es/utils").VsPropMergeType<(BooleanConstructor | NumberConstructor | StringConstructor)[], unknown, unknown>;
}, {}>;
export default _default;
