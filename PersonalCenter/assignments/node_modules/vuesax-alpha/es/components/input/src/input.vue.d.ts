declare const _default: import("vue").DefineComponent<{
    readonly clearable: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly iconAfter: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly id: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly inputStyle: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "border" | "shadow" | "transparent", unknown, null, boolean>;
    readonly labelFloat: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly label: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly loading: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue) | ((new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue))[], unknown, unknown, "", boolean>;
    readonly placeholder: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly progress: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "square" | "rounded", unknown, "rounded", boolean>;
    readonly showPassword: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly state: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly textWhite: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly type: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "text", boolean>;
    readonly wrapClasses: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly wrapStyles: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly block: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly border: BooleanConstructor;
    readonly labelPlaceholder: StringConstructor;
    readonly shadow: BooleanConstructor;
    readonly square: BooleanConstructor;
    readonly transparent: BooleanConstructor;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly type: string;
        readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue) | ((new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue))[], unknown, unknown>;
        readonly label: string;
        readonly border: boolean;
        readonly shadow: boolean;
        readonly shape: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "square" | "rounded", unknown>;
        readonly square: boolean;
        readonly transparent: boolean;
        readonly id: string;
        readonly clearable: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly inputStyle: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "border" | "shadow" | "transparent", unknown>;
        readonly labelFloat: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly placeholder: string;
        readonly showPassword: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly color?: import("../../..").Color | undefined;
        readonly progress?: number | undefined;
        readonly loading?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly block?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly iconAfter?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly textWhite?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly wrapClasses?: string | undefined;
        readonly wrapStyles?: import("vue").StyleValue | undefined;
        readonly state?: import("../../..").Color | undefined;
        readonly labelPlaceholder?: string | undefined;
        readonly "onUpdate:modelValue"?: ((text: import("./input").InputValue) => any) | undefined;
        readonly onChange?: ((value: string) => any) | undefined;
        readonly onInput?: ((value: string) => any) | undefined;
        readonly onFocus?: ((evt: FocusEvent) => any) | undefined;
        readonly onMouseleave?: ((evt: MouseEvent) => any) | undefined;
        readonly onClear?: (() => any) | undefined;
        readonly onBlur?: ((evt: FocusEvent) => any) | undefined;
        readonly onClickIcon?: ((evt: Event) => any) | undefined;
        readonly onMouseenter?: ((evt: MouseEvent) => any) | undefined;
        readonly onKeydown?: ((evt: KeyboardEvent | Event) => any) | undefined;
    } & {}>;
    emit: ((event: "update:modelValue", text: import("./input").InputValue) => void) & ((event: "change", value: string) => void) & ((event: "input", value: string) => void) & ((event: "focus", evt: FocusEvent) => void) & ((event: "mouseleave", evt: MouseEvent) => void) & ((event: "clear") => void) & ((event: "blur", evt: FocusEvent) => void) & ((event: "clickIcon", evt: Event) => void) & ((event: "mouseenter", evt: MouseEvent) => void) & ((event: "keydown", evt: KeyboardEvent | Event) => void);
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    inputId: string;
    messageType: string[];
    model: import("vue").WritableComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue) | ((new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue))[], unknown, unknown>>;
    inputType: import("vue").ComputedRef<string>;
    isVisiblePassword: import("vue").Ref<boolean>;
    isShowPassword: import("vue").ComputedRef<string | false>;
    focused: import("vue").Ref<boolean>;
    hovering: import("vue").Ref<boolean>;
    inputRef: import("vue").ShallowRef<HTMLInputElement | undefined>;
    blur: () => void | undefined;
    handleBlur: (event: FocusEvent) => void;
    handleKeydown: (evt: KeyboardEvent) => void;
    focus: () => Promise<void>;
    handleFocus: (event: FocusEvent) => void;
    handleChange: (event: Event) => void;
    select: () => void | undefined;
    clickIcon: (evs: Event) => void;
    handleShowPassword: () => void;
    handleMouseLeave: (evt: MouseEvent) => void;
    handleMouseEnter: (evt: MouseEvent) => void;
    handleInput: (event: Event) => void;
    showClear: import("vue").ComputedRef<boolean | "">;
    clear: () => void;
    vsBaseClasses: string[];
    inputKls: import("vue").ComputedRef<(string | string[] | {
        [x: string]: string | import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    } | {
        [x: string]: import("../../..").Color | undefined;
    } | {
        [x: string]: import("vue").Slot<any> | undefined;
    } | {
        [x: string]: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
    } | undefined)[]>;
    inputStyle: import("vue").ComputedRef<(Record<string, string> | import("vue").StyleValue | undefined)[]>;
    progressState: import("vue").ComputedRef<"success" | "danger" | "warn">;
    readonly IconClose: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }>>, {
        readonly scale: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    }, {}>> & Record<string, any>;
    readonly IconLoading: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>> & Record<string, any>;
    readonly VsCollapseTransition: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{}, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        on: {
            beforeEnter(el: import("vue").RendererElement): void;
            enter(el: import("vue").RendererElement): void;
            afterEnter(el: import("vue").RendererElement): void;
            beforeLeave(el: import("vue").RendererElement): void;
            leave(el: import("vue").RendererElement): void;
            afterLeave(el: import("vue").RendererElement): void;
        };
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>>;
    readonly NOOP: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (text: import("./input").InputValue) => boolean;
    clickIcon: (evt: Event) => boolean;
    mouseleave: (evt: MouseEvent) => boolean;
    mouseenter: (evt: MouseEvent) => boolean;
    clear: () => boolean;
    input: (value: string) => boolean;
    change: (value: string) => boolean;
    focus: (evt: FocusEvent) => boolean;
    blur: (evt: FocusEvent) => boolean;
    keydown: (evt: KeyboardEvent | Event) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly clearable: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly iconAfter: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly id: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly inputStyle: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "border" | "shadow" | "transparent", unknown, null, boolean>;
    readonly labelFloat: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly label: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly loading: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue) | ((new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue))[], unknown, unknown, "", boolean>;
    readonly placeholder: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, null, boolean>;
    readonly progress: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly shape: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, "square" | "rounded", unknown, "rounded", boolean>;
    readonly showPassword: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly state: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly textWhite: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly type: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, "text", boolean>;
    readonly wrapClasses: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly wrapStyles: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly block: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly border: BooleanConstructor;
    readonly labelPlaceholder: StringConstructor;
    readonly shadow: BooleanConstructor;
    readonly square: BooleanConstructor;
    readonly transparent: BooleanConstructor;
}>> & {
    "onUpdate:modelValue"?: ((text: import("./input").InputValue) => any) | undefined;
    onChange?: ((value: string) => any) | undefined;
    onInput?: ((value: string) => any) | undefined;
    onFocus?: ((evt: FocusEvent) => any) | undefined;
    onMouseleave?: ((evt: MouseEvent) => any) | undefined;
    onClear?: (() => any) | undefined;
    onBlur?: ((evt: FocusEvent) => any) | undefined;
    onClickIcon?: ((evt: Event) => any) | undefined;
    onMouseenter?: ((evt: MouseEvent) => any) | undefined;
    onKeydown?: ((evt: KeyboardEvent | Event) => any) | undefined;
}, {
    readonly type: string;
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue) | ((new (...args: any[]) => import("./input").InputValue & {}) | (() => import("./input").InputValue))[], unknown, unknown>;
    readonly label: string;
    readonly border: boolean;
    readonly shadow: boolean;
    readonly shape: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "square" | "rounded", unknown>;
    readonly square: boolean;
    readonly transparent: boolean;
    readonly id: string;
    readonly clearable: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly inputStyle: import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "border" | "shadow" | "transparent", unknown>;
    readonly labelFloat: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly placeholder: string;
    readonly showPassword: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>;
export default _default;
