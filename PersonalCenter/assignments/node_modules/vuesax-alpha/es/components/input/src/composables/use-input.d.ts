import type { InputEmitsFn, InputProps } from '../input';
export declare const useInput: (props: InputProps, emit: InputEmitsFn) => {
    model: import("vue").WritableComputedRef<import("../../../../utils").VsPropMergeType<(new (...args: any[]) => import("../input").InputValue & {}) | (() => import("../input").InputValue) | ((new (...args: any[]) => import("../input").InputValue & {}) | (() => import("../input").InputValue))[], unknown, unknown>>;
    inputType: import("vue").ComputedRef<string>;
    isVisiblePassword: import("vue").Ref<boolean>;
    inputRef: import("vue").ShallowRef<HTMLInputElement | undefined>;
    isShowPassword: import("vue").ComputedRef<string | false>;
    focused: import("vue").Ref<boolean>;
    hovering: import("vue").Ref<boolean>;
    handleInput: (event: Event) => void;
    focus: () => Promise<void>;
    handleFocus: (event: FocusEvent) => void;
    handleKeydown: (evt: KeyboardEvent) => void;
    blur: () => void | undefined;
    handleBlur: (event: FocusEvent) => void;
    handleChange: (event: Event) => void;
    select: () => void | undefined;
    clickIcon: (evs: Event) => void;
    handleShowPassword: () => void;
    handleMouseLeave: (evt: MouseEvent) => void;
    handleMouseEnter: (evt: MouseEvent) => void;
    clear: () => void;
    showClear: import("vue").ComputedRef<boolean | "">;
};
