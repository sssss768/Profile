{"version":3,"file":"tooltip.mjs","sources":["../../../../../../packages/components/tooltip/src/tooltip.ts"],"sourcesContent":["import { buildProps, definePropType } from '@vuesax-alpha/utils'\nimport { popperProps } from '@vuesax-alpha/components/popper'\nimport { useColorProp } from '@vuesax-alpha/hooks'\nimport type { ShiftOptions } from '@vuesax-alpha/hooks/use-floating/core'\nimport type Tooltip from './tooltip.vue'\n\nimport type { ExtractPropTypes } from 'vue'\n\nexport const tooltipProps = buildProps({\n  ...popperProps,\n  shift: {\n    type: definePropType<ShiftOptions | boolean>([Object, Boolean]),\n    default: true,\n  },\n  color: useColorProp,\n  animation: {\n    type: String,\n    default: 'tooltip',\n  },\n  interactivity: {\n    type: Boolean,\n    default: false,\n  },\n  appendTo: {\n    type: definePropType<string | HTMLElement>(String),\n  },\n  /**\n   * @description tooltip style\n   * @enum `shadow` | `border` | `border-thick`\n   * */\n  type: {\n    type: String,\n    values: ['shadow', 'border', 'border-thick'] as const,\n    default: '',\n  },\n  /**\n   * @description Change the border radius\n   * @enum `circle` | `square`\n   * */\n  shape: {\n    type: String,\n    values: ['circle', 'square', 'default'] as const,\n    default: '',\n  },\n  effect: {\n    type: String,\n    values: ['light', 'dark'] as const,\n    default: 'dark',\n  },\n  showArrow: {\n    type: Boolean,\n    default: true,\n  },\n\n  loading: { type: Boolean },\n  offset: {\n    type: Number,\n    default: 8,\n  },\n\n  /** @deprecated use placement instead*/\n  bottom: Boolean,\n  /** @deprecated use placement instead*/\n  left: Boolean,\n  /** @deprecated use placement instead*/\n  right: Boolean,\n  /** @deprecated use placement instead*/\n  top: Boolean,\n\n  /** @deprecated use trigger instead */\n  notHover: Boolean,\n\n  /** @deprecated use type instead */\n  shadow: Boolean,\n  /** @deprecated use type instead */\n  border: Boolean,\n  /** @deprecated use type instead */\n  borderThick: Boolean,\n\n  /** @deprecated use shape instead */\n  square: Boolean,\n  /** @deprecated use shape instead */\n  circle: Boolean,\n})\n\nexport type TooltipProps = ExtractPropTypes<typeof tooltipProps>\n\nexport type TooltipInstance = InstanceType<typeof Tooltip>\n\nexport type TooltipExpose = {\n  isVisible: boolean\n  contentRef: HTMLElement | undefined\n  triggerRef: HTMLElement | undefined\n  show: () => void\n  hide: () => void\n  update: () => void\n  destroy: () => void\n}\n"],"names":[],"mappings":";;;;;;;AAQO,MAAM,eAAe,UAAW,CAAA;AAAA,EACrC,GAAG,WAAA;AAAA,EACH,KAAO,EAAA;AAAA,IACL,IAAM,EAAA,cAAA,CAAuC,CAAC,MAAA,EAAQ,OAAO,CAAC,CAAA;AAAA,IAC9D,OAAS,EAAA,IAAA;AAAA,GACX;AAAA,EACA,KAAO,EAAA,YAAA;AAAA,EACP,SAAW,EAAA;AAAA,IACT,IAAM,EAAA,MAAA;AAAA,IACN,OAAS,EAAA,SAAA;AAAA,GACX;AAAA,EACA,aAAe,EAAA;AAAA,IACb,IAAM,EAAA,OAAA;AAAA,IACN,OAAS,EAAA,KAAA;AAAA,GACX;AAAA,EACA,QAAU,EAAA;AAAA,IACR,IAAA,EAAM,eAAqC,MAAM,CAAA;AAAA,GACnD;AAAA,EAKA,IAAM,EAAA;AAAA,IACJ,IAAM,EAAA,MAAA;AAAA,IACN,MAAQ,EAAA,CAAC,QAAU,EAAA,QAAA,EAAU,cAAc,CAAA;AAAA,IAC3C,OAAS,EAAA,EAAA;AAAA,GACX;AAAA,EAKA,KAAO,EAAA;AAAA,IACL,IAAM,EAAA,MAAA;AAAA,IACN,MAAQ,EAAA,CAAC,QAAU,EAAA,QAAA,EAAU,SAAS,CAAA;AAAA,IACtC,OAAS,EAAA,EAAA;AAAA,GACX;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,IAAM,EAAA,MAAA;AAAA,IACN,MAAA,EAAQ,CAAC,OAAA,EAAS,MAAM,CAAA;AAAA,IACxB,OAAS,EAAA,MAAA;AAAA,GACX;AAAA,EACA,SAAW,EAAA;AAAA,IACT,IAAM,EAAA,OAAA;AAAA,IACN,OAAS,EAAA,IAAA;AAAA,GACX;AAAA,EAEA,OAAA,EAAS,EAAE,IAAA,EAAM,OAAQ,EAAA;AAAA,EACzB,MAAQ,EAAA;AAAA,IACN,IAAM,EAAA,MAAA;AAAA,IACN,OAAS,EAAA,CAAA;AAAA,GACX;AAAA,EAGA,MAAQ,EAAA,OAAA;AAAA,EAER,IAAM,EAAA,OAAA;AAAA,EAEN,KAAO,EAAA,OAAA;AAAA,EAEP,GAAK,EAAA,OAAA;AAAA,EAGL,QAAU,EAAA,OAAA;AAAA,EAGV,MAAQ,EAAA,OAAA;AAAA,EAER,MAAQ,EAAA,OAAA;AAAA,EAER,WAAa,EAAA,OAAA;AAAA,EAGb,MAAQ,EAAA,OAAA;AAAA,EAER,MAAQ,EAAA,OAAA;AACV,CAAC;;;;"}