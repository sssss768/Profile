import { createElementVNode, defineComponent, ref, reactive, computed, watchEffect, watch, nextTick, openBlock, createElementBlock, normalizeClass, unref, withKeys, createTextVNode, toDisplayString, createBlock, createCommentVNode, createVNode, Fragment, renderList, normalizeStyle } from 'vue';
import { isNil } from 'lodash-unified';
import '../../../../hooks/index.mjs';
import { ChevronLeftDouble, ChevronRightDouble } from '@vuesax-alpha/icons-vue';
import { IconLoading } from '../../../icon/index.mjs';
import { usePagination } from '../usePagination.mjs';
import { paginationPagerProps } from './pager.mjs';
import PaginationProgress from './progress2.mjs';
import _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';
import { useNamespace } from '../../../../hooks/use-namespace/index.mjs';

const _hoisted_1 = ["aria-current", "tabindex"];
const _hoisted_2 = ["tabindex"];
const _hoisted_3 = /* @__PURE__ */ createElementVNode(
  "span",
  null,
  "...",
  -1
);
const _hoisted_4 = ["aria-label", "aria-current", "tabindex", "onClick", "onKeyup"];
const _hoisted_5 = ["tabindex"];
const _hoisted_6 = /* @__PURE__ */ createElementVNode(
  "span",
  null,
  "...",
  -1
);
const _hoisted_7 = ["aria-current", "aria-label", "tabindex"];
const __default__ = defineComponent({
  name: "VsPaginationPager"
});
const _sfc_main = defineComponent({
  ...__default__,
  props: paginationPagerProps,
  emits: ["change"],
  setup(__props, { emit }) {
    const props = __props;
    const nsPager = useNamespace("pager");
    const nsIcon = useNamespace("icon");
    const {
      currentPage,
      disabled,
      pageCount,
      buttonsDotted,
      isPagerDisabled,
      isPagerLoading
    } = usePagination();
    const pagerRef = ref();
    const showPrevMore = ref(false);
    const showNextMore = ref(false);
    const quickPrevHover = ref(false);
    const quickNextHover = ref(false);
    const quickPrevFocus = ref(false);
    const quickNextFocus = ref(false);
    const isChange = ref(false);
    const pageActive = reactive({
      left: 0
    });
    const pagers = computed(() => {
      const pagerCount = props.pagerCount;
      const halfPagerCount = (pagerCount - 1) / 2;
      let showPrevMore2 = false;
      let showNextMore2 = false;
      if (pageCount.value > pagerCount) {
        if (currentPage.value > pagerCount - halfPagerCount) {
          showPrevMore2 = true;
        }
        if (currentPage.value < pageCount.value - halfPagerCount) {
          showNextMore2 = true;
        }
      }
      const array = [];
      if (showPrevMore2 && !showNextMore2) {
        const startPage = pageCount.value - (pagerCount - 2);
        for (let i = startPage; i < pageCount.value; i++) {
          array.push(i);
        }
      } else if (!showPrevMore2 && showNextMore2) {
        for (let i = 2; i < pagerCount; i++) {
          array.push(i);
        }
      } else if (showPrevMore2 && showNextMore2) {
        const offset = Math.floor(pagerCount / 2) - 1;
        for (let i = currentPage.value - offset; i <= currentPage.value + offset; i++) {
          array.push(i);
        }
      } else {
        for (let i = 2; i < pageCount.value; i++) {
          array.push(i);
        }
      }
      return array;
    });
    const tabindex = (index = Number.NaN) => isPagerDisabled(index) ? -1 : 0;
    watchEffect(() => {
      const halfPagerCount = (props.pagerCount - 1) / 2;
      showPrevMore.value = false;
      showNextMore.value = false;
      if (pageCount.value > props.pagerCount) {
        if (currentPage.value > props.pagerCount - halfPagerCount) {
          showPrevMore.value = true;
        }
        if (currentPage.value < pageCount.value - halfPagerCount) {
          showNextMore.value = true;
        }
      }
    });
    watch([pagerRef, currentPage], () => {
      nextTick(() => {
        var _a;
        const pageActived = (_a = pagerRef.value) == null ? void 0 : _a.querySelector(`[aria-label="${currentPage.value}"]`);
        if (isNil(pageActived) || isNil(pagerRef.value)) {
          pageActive.left = 0;
          return;
        }
        isChange.value = true;
        const offsetLeftButtonActive = pageActived.offsetLeft;
        pageActive.left = offsetLeftButtonActive;
        setTimeout(() => isChange.value = false, 300);
      });
    });
    function onMouseEnter(forward = false) {
      if (disabled.value)
        return;
      if (forward) {
        quickPrevHover.value = true;
      } else {
        quickNextHover.value = true;
      }
    }
    function onFocus(forward = false) {
      if (forward) {
        quickPrevFocus.value = true;
      } else {
        quickNextFocus.value = true;
      }
    }
    function onMoreClick(key) {
      let newPage = currentPage.value;
      const pagerCountOffset = props.pagerCount - 2;
      if (key == "prev") {
        newPage = currentPage.value - pagerCountOffset;
      } else if (key == "next") {
        newPage = currentPage.value + pagerCountOffset;
      }
      emitChange(newPage);
    }
    function onPageClick(page) {
      if (!Number.isNaN(+page)) {
        if (page < 1)
          page = 1;
        if (page > pageCount.value)
          page = pageCount.value;
      }
      if (page != currentPage.value)
        emitChange(page);
    }
    function emitChange(page) {
      if (disabled.value || Number.isNaN(+page))
        return;
      emit("change", page);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "div",
        {
          ref_key: "pagerRef",
          ref: pagerRef,
          class: normalizeClass(unref(nsPager).b())
        },
        [
          unref(pageCount) > 0 ? (openBlock(), createElementBlock("button", {
            key: 0,
            class: normalizeClass([[
              unref(nsPager).is("active", unref(currentPage) === 1),
              unref(nsPager).is("disabled", unref(isPagerDisabled)(1)),
              unref(nsPager).is("loading", unref(isPagerLoading)(1))
            ], "number"]),
            "aria-current": unref(currentPage) === 1,
            "aria-label": "1",
            tabindex: tabindex(1),
            onClick: _cache[0] || (_cache[0] = ($event) => onPageClick(1)),
            onKeyup: _cache[1] || (_cache[1] = withKeys(($event) => onPageClick(1), ["enter"]))
          }, [
            createTextVNode(
              toDisplayString(unref(buttonsDotted) ? "" : 1) + " ",
              1
            ),
            unref(isPagerLoading)(1) ? (openBlock(), createBlock(unref(IconLoading), {
              key: 0,
              class: normalizeClass(unref(nsPager).e("loading"))
            }, null, 8, ["class"])) : createCommentVNode("v-if", true)
          ], 42, _hoisted_1)) : createCommentVNode("v-if", true),
          showPrevMore.value && !unref(buttonsDotted) ? (openBlock(), createElementBlock("button", {
            key: 1,
            class: normalizeClass([
              "more",
              "btn-quickprev",
              unref(nsIcon).b(),
              unref(nsPager).is("disabled", unref(disabled))
            ]),
            tabindex: tabindex(),
            onMouseenter: _cache[2] || (_cache[2] = ($event) => onMouseEnter(true)),
            onMouseleave: _cache[3] || (_cache[3] = ($event) => quickPrevHover.value = false),
            onFocus: _cache[4] || (_cache[4] = ($event) => onFocus(true)),
            onBlur: _cache[5] || (_cache[5] = ($event) => quickPrevFocus.value = false),
            onClick: _cache[6] || (_cache[6] = ($event) => onMoreClick("prev")),
            onKeyup: _cache[7] || (_cache[7] = withKeys(($event) => onMoreClick("prev"), ["enter"]))
          }, [
            createVNode(unref(ChevronLeftDouble)),
            _hoisted_3
          ], 42, _hoisted_2)) : createCommentVNode("v-if", true),
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(pagers.value, (pager) => {
              return openBlock(), createElementBlock("button", {
                key: pager,
                class: normalizeClass([[
                  unref(nsPager).is("active", unref(currentPage) === pager),
                  unref(nsPager).is("disabled", unref(isPagerDisabled)(pager)),
                  unref(nsPager).is("loading", unref(isPagerLoading)(pager))
                ], "number"]),
                "aria-label": `${pager}`,
                "aria-current": unref(currentPage) === pager,
                tabindex: tabindex(pager),
                onClick: ($event) => onPageClick(pager),
                onKeyup: withKeys(($event) => onPageClick(pager), ["enter"])
              }, [
                createTextVNode(
                  toDisplayString(unref(buttonsDotted) ? "" : pager) + " ",
                  1
                ),
                unref(isPagerLoading)(pager) ? (openBlock(), createBlock(unref(IconLoading), {
                  key: 0,
                  class: normalizeClass(unref(nsPager).e("loading"))
                }, null, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 42, _hoisted_4);
            }),
            128
          )),
          showNextMore.value && !unref(buttonsDotted) ? (openBlock(), createElementBlock("button", {
            key: 2,
            class: normalizeClass([
              "more",
              "btn-quicknext",
              unref(nsIcon).b(),
              unref(nsPager).is("disabled", unref(disabled))
            ]),
            tabindex: tabindex(),
            onMouseenter: _cache[8] || (_cache[8] = ($event) => onMouseEnter()),
            onMouseleave: _cache[9] || (_cache[9] = ($event) => quickNextHover.value = false),
            onFocus: _cache[10] || (_cache[10] = ($event) => onFocus()),
            onBlur: _cache[11] || (_cache[11] = ($event) => quickNextFocus.value = false),
            onClick: _cache[12] || (_cache[12] = ($event) => onMoreClick("next")),
            onKeyup: _cache[13] || (_cache[13] = withKeys(($event) => onMoreClick("next"), ["enter"]))
          }, [
            createVNode(unref(ChevronRightDouble)),
            _hoisted_6
          ], 42, _hoisted_5)) : createCommentVNode("v-if", true),
          unref(pageCount) > 1 ? (openBlock(), createElementBlock("button", {
            key: 3,
            class: normalizeClass([[
              unref(nsPager).is("active", unref(currentPage) === unref(pageCount)),
              unref(nsPager).is("disabled", unref(isPagerDisabled)(unref(pageCount))),
              unref(nsPager).is("loading", unref(isPagerLoading)(unref(pageCount)))
            ], "number"]),
            "aria-current": unref(currentPage) === unref(pageCount),
            "aria-label": `${unref(pageCount)}`,
            tabindex: tabindex(unref(pageCount)),
            onClick: _cache[14] || (_cache[14] = ($event) => onPageClick(unref(pageCount))),
            onKeyup: _cache[15] || (_cache[15] = withKeys(($event) => onPageClick(unref(pageCount)), ["enter"]))
          }, [
            createTextVNode(
              toDisplayString(unref(buttonsDotted) ? "" : unref(pageCount)) + " ",
              1
            ),
            unref(isPagerLoading)(unref(pageCount)) ? (openBlock(), createBlock(unref(IconLoading), {
              key: 0,
              class: normalizeClass(unref(nsPager).e("loading"))
            }, null, 8, ["class"])) : createCommentVNode("v-if", true)
          ], 42, _hoisted_7)) : createCommentVNode("v-if", true),
          createElementVNode(
            "div",
            {
              class: normalizeClass([unref(nsPager).e("aria-active"), unref(nsPager).is("change", isChange.value)]),
              style: normalizeStyle({ left: `${pageActive.left}px` })
            },
            toDisplayString(unref(buttonsDotted) ? "" : unref(currentPage)),
            7
          ),
          _ctx.progress ? (openBlock(), createBlock(PaginationProgress, { key: 4 })) : createCommentVNode("v-if", true)
        ],
        2
      );
    };
  }
});
var Pager = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/home/runner/work/vuesax-alpha/vuesax-alpha/packages/components/pagination/src/components/pager.vue"]]);

export { Pager as default };
//# sourceMappingURL=pager2.mjs.map
