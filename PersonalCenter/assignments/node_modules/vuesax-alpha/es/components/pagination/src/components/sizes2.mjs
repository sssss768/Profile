import { defineComponent, ref, watch, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, Fragment, renderList, createBlock } from 'vue';
import { isEqual } from 'lodash-unified';
import { VsSelect, VsOption } from '../../../select/index.mjs';
import '../../../../hooks/index.mjs';
import { usePagination } from '../usePagination.mjs';
import { paginationSizesProps, paginationSizesEmits } from './sizes.mjs';
import _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';
import { useNamespace } from '../../../../hooks/use-namespace/index.mjs';

const __default__ = defineComponent({
  name: "VsPaginationSizes"
});
const _sfc_main = defineComponent({
  ...__default__,
  props: paginationSizesProps,
  emits: paginationSizesEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = useNamespace("pagination");
    const { disabled, handleSizeChange } = usePagination();
    const innerPageSize = ref(props.pageSize);
    watch(
      () => props.pageSizes,
      (newVal, oldVal) => {
        if (isEqual(newVal, oldVal))
          return;
        if (Array.isArray(newVal)) {
          const pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];
          emit("page-size-change", pageSize);
        }
      }
    );
    watch(
      () => props.pageSize,
      (newVal) => {
        innerPageSize.value = newVal;
      }
    );
    const innerPageSizes = computed(() => props.pageSizes);
    function handleChange(val) {
      if (val !== innerPageSize.value && typeof val === "number") {
        innerPageSize.value = val;
        handleSizeChange(Number(val));
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "span",
        {
          class: normalizeClass(unref(ns).e("sizes"))
        },
        [
          createVNode(unref(VsSelect), {
            "model-value": innerPageSize.value,
            disabled: unref(disabled),
            onChange: handleChange
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(innerPageSizes.value, (item) => {
                  return openBlock(), createBlock(unref(VsOption), {
                    key: item,
                    value: item,
                    label: `${item} / page`
                  }, null, 8, ["value", "label"]);
                }),
                128
              ))
            ]),
            _: 1
          }, 8, ["model-value", "disabled"])
        ],
        2
      );
    };
  }
});
var Sizes = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/home/runner/work/vuesax-alpha/vuesax-alpha/packages/components/pagination/src/components/sizes.vue"]]);

export { Sizes as default };
//# sourceMappingURL=sizes2.mjs.map
