declare const _default: import("vue").DefineComponent<{
    animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
    appendTo: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
    teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
    fit: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
    zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
    interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }))[], unknown, unknown, () => {}, boolean>;
    shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }))[], unknown, unknown, () => {}, boolean>;
    windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/hooks").OffsetOptions & {}) | (() => import("vuesax-alpha/es/hooks").OffsetOptions) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").OffsetOptions & {}) | (() => import("vuesax-alpha/es/hooks").OffsetOptions))[], unknown, unknown, number, boolean>;
    content: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    rawContent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
    popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
    persistent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    contentRef: import("vue").Ref<HTMLElement | undefined>;
    controlled: import("vue").Ref<boolean>;
    open: import("vue").Ref<boolean>;
    trigger: import("vue").Ref<import("vuesax-alpha/es/utils").Arrayable<import("./trigger").PopperTriggerType>>;
    updatePopper: (shouldUpdateZIndex?: boolean | undefined) => void;
    onOpen: (e?: Event | undefined) => void;
    onClose: (e?: Event | undefined) => void;
    onShow: () => void;
    onHide: () => void;
    onBeforeShow: () => void;
    onBeforeHide: () => void;
    props: import("@vue/shared").LooseRequired<{
        readonly zIndex: number;
        readonly shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
                options?: any;
            } | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
                options?: any;
            } | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
                options?: any;
            } | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            limiter?: {
                fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
                options?: any;
            } | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }))[], unknown, unknown>;
        readonly offset: import("vuesax-alpha/es/hooks").OffsetOptions;
        readonly visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
        readonly flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }) | ((new (...args: any[]) => (boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }) & {}) | (() => boolean | {
            padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
            rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
            elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            mainAxis?: boolean | undefined;
            crossAxis?: boolean | undefined;
            fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
            fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
            fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
            flipAlignment?: boolean | undefined;
            boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
        }))[], unknown, unknown>;
        readonly animation: string;
        readonly teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy))[], "fixed" | "absolute", unknown>;
        readonly placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
        readonly interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly popperClass: string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | (string | {
            [x: string]: boolean;
        } | any)[])[])[])[])[])[])[])[])[])[])[];
        readonly popperStyle: import("vue").StyleValue;
        readonly disabled?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly content?: string | undefined;
        readonly appendTo?: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown> | undefined;
        readonly fit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly rawContent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly persistent?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly onClose?: (() => any) | undefined;
        readonly onFocus?: (() => any) | undefined;
        readonly onMouseleave?: ((evt: MouseEvent) => any) | undefined;
        readonly onBlur?: (() => any) | undefined;
        readonly onMouseenter?: ((evt: MouseEvent) => any) | undefined;
    } & {}>;
    destroyed: import("vue").Ref<boolean>;
    persistentRef: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined>;
    shouldRender: import("vue").ComputedRef<boolean>;
    shouldShow: import("vue").ComputedRef<boolean>;
    popperKls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[])[]>;
    togglePopperAlive: () => void;
    stopWhenControlled: () => true | undefined;
    onContentEnter: (event: unknown) => void;
    onContentLeave: (event: unknown) => void;
    onTransitionLeave: () => void;
    onBeforeEnter: () => void;
    onBeforeLeave: () => void;
    stopHandle: (() => void) | undefined;
    onAfterShow: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    mouseenter: (evt: MouseEvent) => boolean;
    mouseleave: (evt: MouseEvent) => boolean;
    focus: () => boolean;
    blur: () => boolean;
    close: () => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: import("vuesax-alpha/es/utils").VsPropFinalized<StringConstructor, unknown, unknown, string, boolean>;
    appendTo: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement) | ((new (...args: any[]) => (string | HTMLElement) & {}) | (() => string | HTMLElement))[], unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    visible: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown, null, boolean>;
    teleported: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    disabled: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    strategy: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy))[], "fixed" | "absolute", unknown, string, boolean>;
    fit: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    placement: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown, string, boolean>;
    zIndex: import("vuesax-alpha/es/utils").VsPropFinalized<NumberConstructor, unknown, unknown, number, boolean>;
    interactivity: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    flip: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }))[], unknown, unknown, () => {}, boolean>;
    shift: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }))[], unknown, unknown, () => {}, boolean>;
    windowResize: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    windowScroll: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    showArrow: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    offset: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vuesax-alpha/es/hooks").OffsetOptions & {}) | (() => import("vuesax-alpha/es/hooks").OffsetOptions) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").OffsetOptions & {}) | (() => import("vuesax-alpha/es/hooks").OffsetOptions))[], unknown, unknown, number, boolean>;
    content: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    rawContent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    popperClass: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) | ((new (...args: any[]) => (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]) & {}) | (() => string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[]))[], unknown, unknown, string, boolean>;
    popperStyle: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue) | ((new (...args: any[]) => import("vue").StyleValue & {}) | (() => import("vue").StyleValue))[], unknown, unknown, string, boolean>;
    persistent: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    onClose?: (() => any) | undefined;
    onFocus?: (() => any) | undefined;
    onMouseleave?: ((evt: MouseEvent) => any) | undefined;
    onBlur?: (() => any) | undefined;
    onMouseenter?: ((evt: MouseEvent) => any) | undefined;
}, {
    zIndex: number;
    shift: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        limiter?: {
            fn: (state: import("../../../hooks/use-floating/core").MiddlewareState) => import("vuesax-alpha/es/hooks").Coords;
            options?: any;
        } | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }))[], unknown, unknown>;
    offset: import("vuesax-alpha/es/hooks").OffsetOptions;
    visible: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null) | ((new (...args: any[]) => (boolean | null) & {}) | (() => boolean | null))[], unknown, unknown>;
    flip: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) | ((new (...args: any[]) => (boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }) & {}) | (() => boolean | {
        padding?: import("vuesax-alpha/es/hooks").Padding | undefined;
        rootBoundary?: import("vuesax-alpha/es/hooks").RootBoundary | undefined;
        elementContext?: import("../../../hooks/use-floating/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        mainAxis?: boolean | undefined;
        crossAxis?: boolean | undefined;
        fallbackPlacements?: import("vuesax-alpha/es/hooks").Placement[] | undefined;
        fallbackStrategy?: "bestFit" | "initialPlacement" | undefined;
        fallbackAxisSideDirection?: "none" | "end" | "start" | undefined;
        flipAlignment?: boolean | undefined;
        boundary?: import("vuesax-alpha/es/hooks").Boundary | undefined;
    }))[], unknown, unknown>;
    animation: string;
    teleported: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    strategy: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Strategy & {}) | (() => import("vuesax-alpha/es/hooks").Strategy))[], "fixed" | "absolute", unknown>;
    placement: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement) | ((new (...args: any[]) => import("vuesax-alpha/es/hooks").Placement & {}) | (() => import("vuesax-alpha/es/hooks").Placement))[], "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "right" | "right-start" | "right-end", unknown>;
    interactivity: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    windowResize: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    windowScroll: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    showArrow: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    popperClass: string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | (string | {
        [x: string]: boolean;
    } | any)[])[])[])[])[])[])[])[])[])[])[];
    popperStyle: import("vue").StyleValue;
}, {}>;
export default _default;
