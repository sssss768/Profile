declare const _default: import("vue").DefineComponent<{
    disabled: {
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    hit: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    shape: import("../../../utils").VsPropFinalized<StringConstructor, "square", unknown, string, boolean>;
    showClose: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    select: import("./tokens").SelectContext;
    props: import("@vue/shared").LooseRequired<{
        readonly shape: "square";
        readonly showClose: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly hit: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly disabled?: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly onClose?: ((e: Event | MouseEvent) => any) | undefined;
        readonly onClick?: ((e: Event | MouseEvent) => any) | undefined;
    } & {}>;
    emit: ((event: "click", e: Event | MouseEvent) => void) & ((event: "close", e: Event | MouseEvent) => void);
    chipKls: import("vue").ComputedRef<string[]>;
    onClick: (e: Event) => void;
    onClose: (e: Event) => void;
    onMouseEnterClose: () => void;
    onMouseLeaveClose: () => void;
    readonly IconClose: import("../../../utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("../../../utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly hover: {
            readonly type: import("vue").PropType<string>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly scale: import("../../../utils").VsPropFinalized<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown, 1, boolean>;
    }>>, {
        readonly scale: import("../../../utils").VsPropMergeType<(new (...args: any[]) => (string | number) & {}) | (() => string | number) | ((new (...args: any[]) => (string | number) & {}) | (() => string | number))[], unknown, unknown>;
    }, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (e: Event | MouseEvent) => boolean;
    close: (e: Event | MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    hit: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
    shape: import("../../../utils").VsPropFinalized<StringConstructor, "square", unknown, string, boolean>;
    showClose: import("../../../utils").VsPropFinalized<BooleanConstructor, unknown, unknown, boolean, boolean>;
}>> & {
    onClose?: ((e: Event | MouseEvent) => any) | undefined;
    onClick?: ((e: Event | MouseEvent) => any) | undefined;
}, {
    shape: "square";
    showClose: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    hit: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>;
export default _default;
