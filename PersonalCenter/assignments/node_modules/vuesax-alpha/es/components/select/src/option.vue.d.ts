import type { SelectOptionContext } from './tokens';
declare const _default: import("vue").DefineComponent<{
    readonly value: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue) | ((new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue))[], unknown, unknown, null, boolean>;
    readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly label: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly created: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    props: import("@vue/shared").LooseRequired<{
        readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly value: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue) | ((new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue))[], unknown, unknown>;
        readonly created: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly label?: string | undefined;
    } & {}>;
    value: import("vue").Ref<import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue) | ((new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue))[], unknown, unknown>>;
    select: import("./tokens").SelectContext;
    selectRegister: (option: SelectOptionContext) => {
        unregister: () => void;
        updateOption: (option: SelectOptionContext) => void;
    };
    optionGroupRegister: ((option: SelectOptionContext) => {
        unregister: () => void;
    }) | undefined;
    selectGroup: {
        disabled: boolean;
    };
    el: import("vue").Ref<HTMLElement | undefined>;
    isObject: import("vue").ComputedRef<boolean>;
    limitReached: import("vue").ComputedRef<boolean>;
    currentLabel: import("vue").ComputedRef<string>;
    isDisabled: import("vue").ComputedRef<boolean>;
    isSelected: import("vue").ComputedRef<boolean>;
    states: SelectOptionContext;
    unregister: () => void;
    updateOption: (option: SelectOptionContext) => void;
    optionGroupUnregister: (() => void) | undefined;
    hoverItem: () => void;
    optionKls: import("vue").ComputedRef<string[]>;
    selectOptionClick: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly value: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue) | ((new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue))[], unknown, unknown, null, boolean>;
    readonly disabled: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly label: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly created: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
}>>, {
    readonly disabled: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly value: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue) | ((new (...args: any[]) => import("./tokens").SelectOptionValue & {}) | (() => import("./tokens").SelectOptionValue))[], unknown, unknown>;
    readonly created: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>;
export default _default;
