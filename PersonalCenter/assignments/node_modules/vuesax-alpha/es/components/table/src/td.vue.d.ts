declare const _default: import("vue").DefineComponent<{
    readonly checkbox: {
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly edit: {
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    props: import("@vue/shared").LooseRequired<{
        readonly checkbox?: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly edit?: import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly onClick?: ((event: Event | MouseEvent) => any) | undefined;
    } & {}>;
    emit: (event: "click", event: Event | MouseEvent) => void;
    tdKls: import("vue").ComputedRef<string[]>;
    onClick: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (event: Event | MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly checkbox: {
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly edit: {
        readonly type: import("vue").PropType<import("../../../utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    onClick?: ((event: Event | MouseEvent) => any) | undefined;
}, {}, {}>;
export default _default;
