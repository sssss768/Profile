export declare const VsTable: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) | ((new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]))[], unknown, unknown, null, boolean>;
    readonly striped: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly loading: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly multiple: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    t: import("../..").Translator;
    props: import("@vue/shared").LooseRequired<{
        readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) | ((new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]))[], unknown, unknown>;
        readonly loading: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly multiple: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly striped: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly "onUpdate:modelValue"?: ((value: import("./src/table").TableModelValueType) => any) | undefined;
    } & {}>;
    emit: (event: "update:modelValue", value: import("./src/table").TableModelValueType) => void;
    tableKls: import("vue").ComputedRef<string[]>;
    colspan: import("vue").Ref<number>;
    selected: (val: any) => void;
    theadRef: import("vue").Ref<HTMLElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: import("./src/table").TableModelValueType) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) | ((new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]))[], unknown, unknown, null, boolean>;
    readonly striped: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly loading: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
    readonly multiple: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, false, boolean>;
}>> & {
    "onUpdate:modelValue"?: ((value: import("./src/table").TableModelValueType) => any) | undefined;
}, {
    readonly modelValue: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) | ((new (...args: any[]) => (import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]) & {}) | (() => import("./src/table").TableModelValueType | import("./src/table").TableModelValueType[]))[], unknown, unknown>;
    readonly loading: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly multiple: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    readonly striped: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>> & {
    Td: import("vue").DefineComponent<{
        readonly checkbox: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly edit: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        props: import("@vue/shared").LooseRequired<{
            readonly checkbox?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly edit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly onClick?: ((event: Event | MouseEvent) => any) | undefined;
        } & {}>;
        emit: (event: "click", event: Event | MouseEvent) => void;
        tdKls: import("vue").ComputedRef<string[]>;
        onClick: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        click: (event: Event | MouseEvent) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly checkbox: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly edit: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>> & {
        onClick?: ((event: Event | MouseEvent) => any) | undefined;
    }, {}, {}>;
    Th: import("vue").DefineComponent<{
        readonly sort: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        props: import("@vue/shared").LooseRequired<{
            readonly sort?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        } & {}>;
        thRef: import("vue").Ref<HTMLElement | undefined>;
        thKls: import("vue").ComputedRef<string[]>;
        readonly IconArrow: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
            readonly less: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            readonly less: {
                readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __vsPropKey: true;
            };
        }>>, {}, {}>> & Record<string, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly sort: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>>, {}, {}>;
    Tr: import("vue").DefineComponent<{
        readonly color: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly data: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown, null, boolean>;
        readonly isSelected: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
        readonly notClickSelected: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly openExpandOnlyTd: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        props: import("@vue/shared").LooseRequired<{
            readonly data: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown>;
            readonly isSelected: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
            readonly color?: import("../..").Color | undefined;
            readonly notClickSelected?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly openExpandOnlyTd?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
            readonly onClick?: ((event: Event | MouseEvent) => any) | undefined;
            readonly onSelected?: ((value: import("./src/table").TableModelValueType) => any) | undefined;
        } & {}>;
        emit: ((event: "click", event: Event | MouseEvent) => void) & ((event: "selected", value: import("./src/table").TableModelValueType) => void);
        slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        table: import("../..").TableContext;
        trRef: import("vue").Ref<HTMLElement | undefined>;
        contentExpandRef: import("vue").Ref<HTMLElement | undefined>;
        expand: import("vue").Ref<boolean>;
        isSelected: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        vsBaseClasses: string[];
        trKls: import("vue").ComputedRef<(string | string[])[]>;
        trStyles: import("vue").ComputedRef<Record<string, string>[]>;
        click: (evs: any) => void;
        unref: typeof import("vue").unref;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        click: (event: Event | MouseEvent) => boolean;
        selected: (value: import("./src/table").TableModelValueType) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly color: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly data: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown, null, boolean>;
        readonly isSelected: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
        readonly notClickSelected: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
        readonly openExpandOnlyTd: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>> & {
        onClick?: ((event: Event | MouseEvent) => any) | undefined;
        onSelected?: ((value: import("./src/table").TableModelValueType) => any) | undefined;
    }, {
        readonly data: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown>;
        readonly isSelected: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
    }, {}>;
};
export default VsTable;
export declare const VsTd: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly checkbox: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly edit: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    props: import("@vue/shared").LooseRequired<{
        readonly checkbox?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly edit?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly onClick?: ((event: Event | MouseEvent) => any) | undefined;
    } & {}>;
    emit: (event: "click", event: Event | MouseEvent) => void;
    tdKls: import("vue").ComputedRef<string[]>;
    onClick: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (event: Event | MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly checkbox: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly edit: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    onClick?: ((event: Event | MouseEvent) => any) | undefined;
}, {}, {}>>;
export declare const VsTh: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly sort: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    props: import("@vue/shared").LooseRequired<{
        readonly sort?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
    } & {}>;
    thRef: import("vue").Ref<HTMLElement | undefined>;
    thKls: import("vue").ComputedRef<string[]>;
    readonly IconArrow: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly less: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly less: {
            readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __vsPropKey: true;
        };
    }>>, {}, {}>> & Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly sort: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>>, {}, {}>>;
export declare const VsTr: import("vuesax-alpha/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly data: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown, null, boolean>;
    readonly isSelected: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
    readonly notClickSelected: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly openExpandOnlyTd: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    props: import("@vue/shared").LooseRequired<{
        readonly data: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown>;
        readonly isSelected: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly color?: import("../..").Color | undefined;
        readonly notClickSelected?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly openExpandOnlyTd?: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown> | undefined;
        readonly onClick?: ((event: Event | MouseEvent) => any) | undefined;
        readonly onSelected?: ((value: import("./src/table").TableModelValueType) => any) | undefined;
    } & {}>;
    emit: ((event: "click", event: Event | MouseEvent) => void) & ((event: "selected", value: import("./src/table").TableModelValueType) => void);
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    table: import("../..").TableContext;
    trRef: import("vue").Ref<HTMLElement | undefined>;
    contentExpandRef: import("vue").Ref<HTMLElement | undefined>;
    expand: import("vue").Ref<boolean>;
    isSelected: import("vue").ComputedRef<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
    vsBaseClasses: string[];
    trKls: import("vue").ComputedRef<(string | string[])[]>;
    trStyles: import("vue").ComputedRef<Record<string, string>[]>;
    click: (evs: any) => void;
    unref: typeof import("vue").unref;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (event: Event | MouseEvent) => boolean;
    selected: (value: import("./src/table").TableModelValueType) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly color: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", import("../..").Color>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly data: import("vuesax-alpha/es/utils").VsPropFinalized<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown, null, boolean>;
    readonly isSelected: import("vuesax-alpha/es/utils").VsPropFinalized<BooleanConstructor, unknown, unknown, null, boolean>;
    readonly notClickSelected: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
    readonly openExpandOnlyTd: {
        readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        __vsPropKey: true;
    };
}>> & {
    onClick?: ((event: Event | MouseEvent) => any) | undefined;
    onSelected?: ((value: import("./src/table").TableModelValueType) => any) | undefined;
}, {
    readonly data: import("vuesax-alpha/es/utils").VsPropMergeType<(new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType) | ((new (...args: any[]) => import("./src/table").TableModelValueType & {}) | (() => import("./src/table").TableModelValueType))[], unknown, unknown>;
    readonly isSelected: import("vuesax-alpha/es/utils").VsPropMergeType<BooleanConstructor, unknown, unknown>;
}, {}>>;
export * from './src/table';
export * from './src/utils';
