export declare type Alignment = 'start' | 'end';
export declare type Side = 'top' | 'right' | 'bottom' | 'left';
export declare type AlignedPlacement = `${Side}-${Alignment}`;
export declare type Placement = Side | AlignedPlacement;
export declare type Strategy = 'absolute' | 'fixed';
export declare type Axis = 'x' | 'y';
export declare type Coords = {
    [key in Axis]: number;
};
export declare type Length = 'width' | 'height';
export declare type Dimensions = {
    [key in Length]: number;
};
export declare type SideObject = {
    [key in Side]: number;
};
export declare type Rect = Coords & Dimensions;
export declare type Padding = number | Partial<SideObject>;
export declare type ClientRectObject = Rect & SideObject;
export interface ElementRects {
    reference: Rect;
    floating: Rect;
}
export declare type VirtualElement = {
    getBoundingClientRect(): ClientRectObject;
    contextElement?: any;
};
export declare const sides: Side[];
export declare const alignments: Alignment[];
export declare const placements: Placement[];
export declare const min: (...values: number[]) => number;
export declare const max: (...values: number[]) => number;
export declare const round: (x: number) => number;
export declare const floor: (x: number) => number;
export declare const createCoords: (v: number) => {
    x: number;
    y: number;
};
export declare function clamp(start: number, value: number, end: number): number;
export declare function evaluate<T, P>(value: T | ((param: P) => T), param: P): T;
export declare function getSide(placement: Placement): Side;
export declare function getAlignment(placement: Placement): Alignment | undefined;
export declare function getOppositeAxis(axis: Axis): Axis;
export declare function getAxisLength(axis: Axis): Length;
export declare function getSideAxis(placement: Placement): Axis;
export declare function getAlignmentAxis(placement: Placement): Axis;
export declare function getAlignmentSides(placement: Placement, rects: ElementRects, rtl?: boolean): [Side, Side];
export declare function getExpandedPlacements(placement: Placement): Array<Placement>;
export declare function getOppositeAlignmentPlacement<T extends string>(placement: T): T;
export declare function getOppositeAxisPlacements(placement: Placement, flipAlignment: boolean, direction: 'none' | Alignment, rtl?: boolean): Placement[];
export declare function getOppositePlacement<T extends string>(placement: T): T;
export declare function expandPaddingObject(padding: Partial<SideObject>): SideObject;
export declare function getPaddingObject(padding: Padding): SideObject;
export declare function rectToClientRect(rect: Rect): ClientRectObject;
