import '../core/index.mjs';
import { platform } from './platform.mjs';
export { platform } from './platform.mjs';
import './utils/index.mjs';
export { arrow, flip, limitShift, shift } from './middleware.mjs';
import './types.mjs';
import { computePosition as computePosition$1 } from '../core/compute-position.mjs';
export { getBoundingClientRect } from './utils/get-bounding-client-rect.mjs';
export { unwrapElement } from './utils/unwrap-element.mjs';
export { detectOverflow } from '../core/detect-overflow.mjs';
export { offset } from '../core/middleware/offset.mjs';

const computePosition = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = { platform, ...options };
  const platformWithCache = { ...mergedOptions.platform, _c: cache };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

export { computePosition };
//# sourceMappingURL=index.mjs.map
