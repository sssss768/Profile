import type { MaybeRef } from 'vuesax-alpha/es/utils';
import type { Color, ComponentSize } from 'vuesax-alpha/es/constants';
export declare const useSizeProp: {
    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
    readonly required: false;
    readonly validator: ((val: unknown) => boolean) | undefined;
    __vsPropKey: true;
};
export declare const useSize: (fallback?: MaybeRef<ComponentSize | undefined>, ignore?: Partial<Record<'prop', boolean>>) => import("vue").ComputedRef<"" | "default" | "small" | "large">;
export declare const useDisabled: (fallback?: MaybeRef<boolean | undefined>) => import("vue").ComputedRef<boolean>;
export declare const useColorProp: {
    readonly type: import("vue").PropType<import("vuesax-alpha/es/utils").VsPropMergeType<StringConstructor, "primary" | "success" | "danger" | "warn" | "dark" | "text" | "light" | "secondary" | "facebook" | "twitter" | "youtube" | "pinterest" | "linkedin" | "snapchat" | "whatsapp" | "tumblr" | "reddit" | "spotify" | "amazon" | "medium" | "vimeo" | "skype" | "dribbble" | "slack" | "yahoo" | "twitch" | "discord" | "telegram" | "google-plus" | "messenger", Color>>;
    readonly required: false;
    readonly validator: ((val: unknown) => boolean) | undefined;
    __vsPropKey: true;
};
export declare const useColor: (fallback?: MaybeRef<Color | undefined>) => import("vue").ComputedRef<Color | undefined>;
